// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package final_etl.subscriber_call_measure_obd_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.ReportingHelper;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Subscriber_call_measure_OBD Purpose: Subscriber_call_measure<br>
 * Description: Subscriber_call_measure job populate call data from inbox and CDR <br>
 * @author user@talend.com
 * @version 6.1.1.20151214_1327
 * @status DEV
 */
public class Subscriber_call_measure_OBD implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (motech_login != null) {

				this.setProperty("motech_login", motech_login.toString());

			}

			if (motech_database != null) {

				this.setProperty("motech_database", motech_database.toString());

			}

			if (motech_port != null) {

				this.setProperty("motech_port", motech_port.toString());

			}

			if (motech_password != null) {

				this.setProperty("motech_password", motech_password.toString());

			}

			if (motech_additionalParams != null) {

				this.setProperty("motech_additionalParams",
						motech_additionalParams.toString());

			}

			if (motech_server != null) {

				this.setProperty("motech_server", motech_server.toString());

			}

			if (report_port != null) {

				this.setProperty("report_port", report_port.toString());

			}

			if (report_server != null) {

				this.setProperty("report_server", report_server.toString());

			}

			if (report_database != null) {

				this.setProperty("report_database", report_database.toString());

			}

			if (report_login != null) {

				this.setProperty("report_login", report_login.toString());

			}

			if (report_password != null) {

				this.setProperty("report_password", report_password.toString());

			}

			if (report_AdditionalParams != null) {

				this.setProperty("report_AdditionalParams",
						report_AdditionalParams.toString());

			}

		}

		public String motech_login;

		public String getMotech_login() {
			return this.motech_login;
		}

		public String motech_database;

		public String getMotech_database() {
			return this.motech_database;
		}

		public String motech_port;

		public String getMotech_port() {
			return this.motech_port;
		}

		public java.lang.String motech_password;

		public java.lang.String getMotech_password() {
			return this.motech_password;
		}

		public String motech_additionalParams;

		public String getMotech_additionalParams() {
			return this.motech_additionalParams;
		}

		public String motech_server;

		public String getMotech_server() {
			return this.motech_server;
		}

		public String report_port;

		public String getReport_port() {
			return this.report_port;
		}

		public String report_server;

		public String getReport_server() {
			return this.report_server;
		}

		public String report_database;

		public String getReport_database() {
			return this.report_database;
		}

		public String report_login;

		public String getReport_login() {
			return this.report_login;
		}

		public java.lang.String report_password;

		public java.lang.String getReport_password() {
			return this.report_password;
		}

		public String report_AdditionalParams;

		public String getReport_AdditionalParams() {
			return this.report_AdditionalParams;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "Subscriber_call_measure_OBD";
	private final String projectName = "FINAL_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Subscriber_call_measure_OBD.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Subscriber_call_measure_OBD.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMysqlInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length == 0) {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "../db_connection.txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"../db_connection.txt", "ISO-8859-15", ";",
								"\n", true, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row5 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row5.key = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row5.value = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							// ////////////////////////
							String tmp_key_tContextLoad_1 = null;
							String key_tContextLoad_1 = null;
							if (row5.key != null) {
								tmp_key_tContextLoad_1 = row5.key.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
										.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row5.key = tmp_key_tContextLoad_1;
								}
							}
							if (row5.key != null) {
								key_tContextLoad_1 = row5.key;
							}
							String value_tContextLoad_1 = null;
							if (row5.value != null) {
								value_tContextLoad_1 = row5.value;
							}

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null
											&& "motech_login"
													.equals(key_tContextLoad_1)) {
										context.motech_login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_database"
													.equals(key_tContextLoad_1)) {
										context.motech_database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_port"
													.equals(key_tContextLoad_1)) {
										context.motech_port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_password"
													.equals(key_tContextLoad_1)) {
										context.motech_password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_additionalParams"
													.equals(key_tContextLoad_1)) {
										context.motech_additionalParams = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_server"
													.equals(key_tContextLoad_1)) {
										context.motech_server = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_port"
													.equals(key_tContextLoad_1)) {
										context.report_port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_server"
													.equals(key_tContextLoad_1)) {
										context.report_server = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_database"
													.equals(key_tContextLoad_1)) {
										context.report_database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_login"
													.equals(key_tContextLoad_1)) {
										context.report_login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_password"
													.equals(key_tContextLoad_1)) {
										context.report_password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_AdditionalParams"
													.equals(key_tContextLoad_1)) {
										context.report_AdditionalParams = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1
												.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1
												.add(key_tContextLoad_1);
									}
									if (value_tContextLoad_1 == null) {
										context.setProperty(key_tContextLoad_1,
												"");
									} else {
										context.setProperty(key_tContextLoad_1,
												value_tContextLoad_1);
									}
								} catch (java.lang.Exception e) {
									System.err
											.println("Setting a value for the key \""
													+ key_tContextLoad_1
													+ "\" has failed. Error message: "
													+ e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							// ////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("../db_connection.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				parametersToEncrypt_tContextLoad_1.add("motech_password");

				parametersToEncrypt_tContextLoad_1.add("report_password");

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_3Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];

		public String lastEtlTime;

		public String getLastEtlTime() {
			return this.lastEtlTime;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length == 0) {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD) {

				try {

					int length = 0;

					this.lastEtlTime = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lastEtlTime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lastEtlTime=" + lastEtlTime);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_3 begin ] start
				 */

				ok_Hash.put("tMysqlInput_3", false);
				start_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				currentComponent = "tMysqlInput_3";

				int tos_count_tMysqlInput_3 = 0;

				java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
						.getTime();
				int nb_line_tMysqlInput_3 = 0;
				java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_3);
				String dbUser_tMysqlInput_3 = context.report_login;

				final String decryptedPassword_tMysqlInput_3 = context.report_password;

				String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;

				String url_tMysqlInput_3 = "jdbc:mysql://"
						+ context.report_server + ":" + context.report_port
						+ "/" + context.report_database + "?"
						+ context.report_AdditionalParams;

				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_3, dbUser_tMysqlInput_3,
						dbPwd_tMysqlInput_3);

				java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
						.createStatement();

				String dbquery_tMysqlInput_3 = "SELECT last_etl_time FROM ETL_info_table\nWHERE table_id=13";

				globalMap.put("tMysqlInput_3_QUERY", dbquery_tMysqlInput_3);

				java.sql.ResultSet rs_tMysqlInput_3 = null;
				try {
					rs_tMysqlInput_3 = stmt_tMysqlInput_3
							.executeQuery(dbquery_tMysqlInput_3);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
							.getMetaData();
					int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3
							.getColumnCount();

					String tmpContent_tMysqlInput_3 = null;

					while (rs_tMysqlInput_3.next()) {
						nb_line_tMysqlInput_3++;

						if (colQtyInRs_tMysqlInput_3 < 1) {
							row6.lastEtlTime = null;
						} else {

							row6.lastEtlTime = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_3, 1, false);
						}

						/**
						 * [tMysqlInput_3 begin ] stop
						 */

						/**
						 * [tMysqlInput_3 main ] start
						 */

						currentComponent = "tMysqlInput_3";

						tos_count_tMysqlInput_3++;

						/**
						 * [tMysqlInput_3 main ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// Code generated according to input schema and output
						// schema

						globalMap.put("lastEtlTime",
								row6.lastEtlTime != null ? row6.lastEtlTime
										: "");
						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tMysqlInput_3 end ] start
						 */

						currentComponent = "tMysqlInput_3";

					}
				} finally {
					if (rs_tMysqlInput_3 != null) {
						rs_tMysqlInput_3.close();
					}
					stmt_tMysqlInput_3.close();
					if (conn_tMysqlInput_3 != null
							&& !conn_tMysqlInput_3.isClosed()) {

						conn_tMysqlInput_3.close();

					}

				}

				globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

				ok_Hash.put("tMysqlInput_3", true);
				end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				/**
				 * [tMysqlInput_3 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_3 finally ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class insert_subscription_status_measureStruct
			implements
			routines.system.IPersistableRow<insert_subscription_status_measureStruct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public int Date_ID;

		public int getDate_ID() {
			return this.Date_ID;
		}

		public int Time_ID;

		public int getTime_ID() {
			return this.Time_ID;
		}

		public long Operator_ID;

		public long getOperator_ID() {
			return this.Operator_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				result = prime * result + (int) this.Date_ID;

				result = prime * result + (int) this.Time_ID;

				result = prime * result + (int) this.Operator_ID;

				result = prime * result
						+ ((this.Status == null) ? 0 : this.Status.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_subscription_status_measureStruct other = (insert_subscription_status_measureStruct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			if (this.Date_ID != other.Date_ID)
				return false;

			if (this.Time_ID != other.Time_ID)
				return false;

			if (this.Operator_ID != other.Operator_ID)
				return false;

			if (this.Status == null) {
				if (other.Status != null)
					return false;

			} else if (!this.Status.equals(other.Status))

				return false;

			return true;
		}

		public void copyDataTo(insert_subscription_status_measureStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Date_ID = this.Date_ID;
			other.Time_ID = this.Time_ID;
			other.Operator_ID = this.Operator_ID;
			other.Status = this.Status;
			other.Last_Modified_Time = this.Last_Modified_Time;

		}

		public void copyKeysDataTo(
				insert_subscription_status_measureStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Date_ID = this.Date_ID;
			other.Time_ID = this.Time_ID;
			other.Operator_ID = this.Operator_ID;
			other.Status = this.Status;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length == 0) {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Date_ID = dis.readInt();

					this.Time_ID = dis.readInt();

					this.Operator_ID = dis.readLong();

					this.Status = readString(dis);

					this.Last_Modified_Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// int

				dos.writeInt(this.Date_ID);

				// int

				dos.writeInt(this.Time_ID);

				// long

				dos.writeLong(this.Operator_ID);

				// String

				writeString(this.Status, dos);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Date_ID=" + String.valueOf(Date_ID));
			sb.append(",Time_ID=" + String.valueOf(Time_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Status=" + Status);
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_subscription_status_measureStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date_ID, other.Date_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Time_ID, other.Time_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Operator_ID,
					other.Operator_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Status, other.Status);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Operator_ID;

		public long getOperator_ID() {
			return this.Operator_ID;
		}

		public long Subscription_Pack_ID;

		public long getSubscription_Pack_ID() {
			return this.Subscription_Pack_ID;
		}

		public long Campaign_ID;

		public long getCampaign_ID() {
			return this.Campaign_ID;
		}

		public int Start_Date_ID;

		public int getStart_Date_ID() {
			return this.Start_Date_ID;
		}

		public int End_Date_ID;

		public int getEnd_Date_ID() {
			return this.End_Date_ID;
		}

		public int Start_Time_ID;

		public int getStart_Time_ID() {
			return this.Start_Time_ID;
		}

		public int End_Time_ID;

		public int getEnd_Time_ID() {
			return this.End_Time_ID;
		}

		public Long State_ID;

		public Long getState_ID() {
			return this.State_ID;
		}

		public String Call_Status;

		public String getCall_Status() {
			return this.Call_Status;
		}

		public Integer Duration;

		public Integer getDuration() {
			return this.Duration;
		}

		public String Service_Option;

		public String getService_Option() {
			return this.Service_Option;
		}

		public Integer Percentage_Listened;

		public Integer getPercentage_Listened() {
			return this.Percentage_Listened;
		}

		public String Call_Source;

		public String getCall_Source() {
			return this.Call_Source;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public Integer Duration_In_Pulse;

		public Integer getDuration_In_Pulse() {
			return this.Duration_In_Pulse;
		}

		public java.util.Date Call_Start_Time;

		public java.util.Date getCall_Start_Time() {
			return this.Call_Start_Time;
		}

		public java.util.Date Call_End_Time;

		public java.util.Date getCall_End_Time() {
			return this.Call_End_Time;
		}

		public Integer Attempt_Number;

		public Integer getAttempt_Number() {
			return this.Attempt_Number;
		}

		public java.util.Date Subscription_Start_Date;

		public java.util.Date getSubscription_Start_Date() {
			return this.Subscription_Start_Date;
		}

		public Integer msg_duration;

		public Integer getMsg_duration() {
			return this.msg_duration;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		public Integer call_duration;

		public Integer getCall_duration() {
			return this.call_duration;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length == 0) {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Operator_ID = dis.readLong();

					this.Subscription_Pack_ID = dis.readLong();

					this.Campaign_ID = dis.readLong();

					this.Start_Date_ID = dis.readInt();

					this.End_Date_ID = dis.readInt();

					this.Start_Time_ID = dis.readInt();

					this.End_Time_ID = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.State_ID = null;
					} else {
						this.State_ID = dis.readLong();
					}

					this.Call_Status = readString(dis);

					this.Duration = readInteger(dis);

					this.Service_Option = readString(dis);

					this.Percentage_Listened = readInteger(dis);

					this.Call_Source = readString(dis);

					this.Subscription_Status = readString(dis);

					this.Duration_In_Pulse = readInteger(dis);

					this.Call_Start_Time = readDate(dis);

					this.Call_End_Time = readDate(dis);

					this.Attempt_Number = readInteger(dis);

					this.Subscription_Start_Date = readDate(dis);

					this.msg_duration = readInteger(dis);

					this.modificationDate = readString(dis);

					this.call_duration = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Operator_ID);

				// long

				dos.writeLong(this.Subscription_Pack_ID);

				// long

				dos.writeLong(this.Campaign_ID);

				// int

				dos.writeInt(this.Start_Date_ID);

				// int

				dos.writeInt(this.End_Date_ID);

				// int

				dos.writeInt(this.Start_Time_ID);

				// int

				dos.writeInt(this.End_Time_ID);

				// Long

				if (this.State_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.State_ID);
				}

				// String

				writeString(this.Call_Status, dos);

				// Integer

				writeInteger(this.Duration, dos);

				// String

				writeString(this.Service_Option, dos);

				// Integer

				writeInteger(this.Percentage_Listened, dos);

				// String

				writeString(this.Call_Source, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// Integer

				writeInteger(this.Duration_In_Pulse, dos);

				// java.util.Date

				writeDate(this.Call_Start_Time, dos);

				// java.util.Date

				writeDate(this.Call_End_Time, dos);

				// Integer

				writeInteger(this.Attempt_Number, dos);

				// java.util.Date

				writeDate(this.Subscription_Start_Date, dos);

				// Integer

				writeInteger(this.msg_duration, dos);

				// String

				writeString(this.modificationDate, dos);

				// Integer

				writeInteger(this.call_duration, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Subscription_Pack_ID="
					+ String.valueOf(Subscription_Pack_ID));
			sb.append(",Campaign_ID=" + String.valueOf(Campaign_ID));
			sb.append(",Start_Date_ID=" + String.valueOf(Start_Date_ID));
			sb.append(",End_Date_ID=" + String.valueOf(End_Date_ID));
			sb.append(",Start_Time_ID=" + String.valueOf(Start_Time_ID));
			sb.append(",End_Time_ID=" + String.valueOf(End_Time_ID));
			sb.append(",State_ID=" + String.valueOf(State_ID));
			sb.append(",Call_Status=" + Call_Status);
			sb.append(",Duration=" + String.valueOf(Duration));
			sb.append(",Service_Option=" + Service_Option);
			sb.append(",Percentage_Listened="
					+ String.valueOf(Percentage_Listened));
			sb.append(",Call_Source=" + Call_Source);
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Duration_In_Pulse=" + String.valueOf(Duration_In_Pulse));
			sb.append(",Call_Start_Time=" + String.valueOf(Call_Start_Time));
			sb.append(",Call_End_Time=" + String.valueOf(Call_End_Time));
			sb.append(",Attempt_Number=" + String.valueOf(Attempt_Number));
			sb.append(",Subscription_Start_Date="
					+ String.valueOf(Subscription_Start_Date));
			sb.append(",msg_duration=" + String.valueOf(msg_duration));
			sb.append(",modificationDate=" + modificationDate);
			sb.append(",call_duration=" + String.valueOf(call_duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Operator_ID;

		public long getOperator_ID() {
			return this.Operator_ID;
		}

		public long Subscription_Pack_ID;

		public long getSubscription_Pack_ID() {
			return this.Subscription_Pack_ID;
		}

		public long Campaign_ID;

		public long getCampaign_ID() {
			return this.Campaign_ID;
		}

		public int Start_Date_ID;

		public int getStart_Date_ID() {
			return this.Start_Date_ID;
		}

		public int End_Date_ID;

		public int getEnd_Date_ID() {
			return this.End_Date_ID;
		}

		public int Start_Time_ID;

		public int getStart_Time_ID() {
			return this.Start_Time_ID;
		}

		public int End_Time_ID;

		public int getEnd_Time_ID() {
			return this.End_Time_ID;
		}

		public Long State_ID;

		public Long getState_ID() {
			return this.State_ID;
		}

		public String Call_Status;

		public String getCall_Status() {
			return this.Call_Status;
		}

		public Integer Duration;

		public Integer getDuration() {
			return this.Duration;
		}

		public String Service_Option;

		public String getService_Option() {
			return this.Service_Option;
		}

		public Integer Percentage_Listened;

		public Integer getPercentage_Listened() {
			return this.Percentage_Listened;
		}

		public String Call_Source;

		public String getCall_Source() {
			return this.Call_Source;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public Integer Duration_In_Pulse;

		public Integer getDuration_In_Pulse() {
			return this.Duration_In_Pulse;
		}

		public java.util.Date Call_Start_Time;

		public java.util.Date getCall_Start_Time() {
			return this.Call_Start_Time;
		}

		public java.util.Date Call_End_Time;

		public java.util.Date getCall_End_Time() {
			return this.Call_End_Time;
		}

		public Integer Attempt_Number;

		public Integer getAttempt_Number() {
			return this.Attempt_Number;
		}

		public java.util.Date Subscription_Start_Date;

		public java.util.Date getSubscription_Start_Date() {
			return this.Subscription_Start_Date;
		}

		public Integer msg_duration;

		public Integer getMsg_duration() {
			return this.msg_duration;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		public Integer call_duration;

		public Integer getCall_duration() {
			return this.call_duration;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				result = prime * result + (int) this.Operator_ID;

				result = prime * result + (int) this.Subscription_Pack_ID;

				result = prime * result + (int) this.Campaign_ID;

				result = prime * result + (int) this.Start_Date_ID;

				result = prime * result + (int) this.End_Date_ID;

				result = prime * result + (int) this.Start_Time_ID;

				result = prime * result + (int) this.End_Time_ID;

				result = prime
						* result
						+ ((this.Call_Start_Time == null) ? 0
								: this.Call_Start_Time.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			if (this.Operator_ID != other.Operator_ID)
				return false;

			if (this.Subscription_Pack_ID != other.Subscription_Pack_ID)
				return false;

			if (this.Campaign_ID != other.Campaign_ID)
				return false;

			if (this.Start_Date_ID != other.Start_Date_ID)
				return false;

			if (this.End_Date_ID != other.End_Date_ID)
				return false;

			if (this.Start_Time_ID != other.Start_Time_ID)
				return false;

			if (this.End_Time_ID != other.End_Time_ID)
				return false;

			if (this.Call_Start_Time == null) {
				if (other.Call_Start_Time != null)
					return false;

			} else if (!this.Call_Start_Time.equals(other.Call_Start_Time))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Operator_ID = this.Operator_ID;
			other.Subscription_Pack_ID = this.Subscription_Pack_ID;
			other.Campaign_ID = this.Campaign_ID;
			other.Start_Date_ID = this.Start_Date_ID;
			other.End_Date_ID = this.End_Date_ID;
			other.Start_Time_ID = this.Start_Time_ID;
			other.End_Time_ID = this.End_Time_ID;
			other.State_ID = this.State_ID;
			other.Call_Status = this.Call_Status;
			other.Duration = this.Duration;
			other.Service_Option = this.Service_Option;
			other.Percentage_Listened = this.Percentage_Listened;
			other.Call_Source = this.Call_Source;
			other.Subscription_Status = this.Subscription_Status;
			other.Duration_In_Pulse = this.Duration_In_Pulse;
			other.Call_Start_Time = this.Call_Start_Time;
			other.Call_End_Time = this.Call_End_Time;
			other.Attempt_Number = this.Attempt_Number;
			other.Subscription_Start_Date = this.Subscription_Start_Date;
			other.msg_duration = this.msg_duration;
			other.modificationDate = this.modificationDate;
			other.call_duration = this.call_duration;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Operator_ID = this.Operator_ID;
			other.Subscription_Pack_ID = this.Subscription_Pack_ID;
			other.Campaign_ID = this.Campaign_ID;
			other.Start_Date_ID = this.Start_Date_ID;
			other.End_Date_ID = this.End_Date_ID;
			other.Start_Time_ID = this.Start_Time_ID;
			other.End_Time_ID = this.End_Time_ID;
			other.Call_Start_Time = this.Call_Start_Time;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length == 0) {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Operator_ID = dis.readLong();

					this.Subscription_Pack_ID = dis.readLong();

					this.Campaign_ID = dis.readLong();

					this.Start_Date_ID = dis.readInt();

					this.End_Date_ID = dis.readInt();

					this.Start_Time_ID = dis.readInt();

					this.End_Time_ID = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.State_ID = null;
					} else {
						this.State_ID = dis.readLong();
					}

					this.Call_Status = readString(dis);

					this.Duration = readInteger(dis);

					this.Service_Option = readString(dis);

					this.Percentage_Listened = readInteger(dis);

					this.Call_Source = readString(dis);

					this.Subscription_Status = readString(dis);

					this.Duration_In_Pulse = readInteger(dis);

					this.Call_Start_Time = readDate(dis);

					this.Call_End_Time = readDate(dis);

					this.Attempt_Number = readInteger(dis);

					this.Subscription_Start_Date = readDate(dis);

					this.msg_duration = readInteger(dis);

					this.modificationDate = readString(dis);

					this.call_duration = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Operator_ID);

				// long

				dos.writeLong(this.Subscription_Pack_ID);

				// long

				dos.writeLong(this.Campaign_ID);

				// int

				dos.writeInt(this.Start_Date_ID);

				// int

				dos.writeInt(this.End_Date_ID);

				// int

				dos.writeInt(this.Start_Time_ID);

				// int

				dos.writeInt(this.End_Time_ID);

				// Long

				if (this.State_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.State_ID);
				}

				// String

				writeString(this.Call_Status, dos);

				// Integer

				writeInteger(this.Duration, dos);

				// String

				writeString(this.Service_Option, dos);

				// Integer

				writeInteger(this.Percentage_Listened, dos);

				// String

				writeString(this.Call_Source, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// Integer

				writeInteger(this.Duration_In_Pulse, dos);

				// java.util.Date

				writeDate(this.Call_Start_Time, dos);

				// java.util.Date

				writeDate(this.Call_End_Time, dos);

				// Integer

				writeInteger(this.Attempt_Number, dos);

				// java.util.Date

				writeDate(this.Subscription_Start_Date, dos);

				// Integer

				writeInteger(this.msg_duration, dos);

				// String

				writeString(this.modificationDate, dos);

				// Integer

				writeInteger(this.call_duration, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Subscription_Pack_ID="
					+ String.valueOf(Subscription_Pack_ID));
			sb.append(",Campaign_ID=" + String.valueOf(Campaign_ID));
			sb.append(",Start_Date_ID=" + String.valueOf(Start_Date_ID));
			sb.append(",End_Date_ID=" + String.valueOf(End_Date_ID));
			sb.append(",Start_Time_ID=" + String.valueOf(Start_Time_ID));
			sb.append(",End_Time_ID=" + String.valueOf(End_Time_ID));
			sb.append(",State_ID=" + String.valueOf(State_ID));
			sb.append(",Call_Status=" + Call_Status);
			sb.append(",Duration=" + String.valueOf(Duration));
			sb.append(",Service_Option=" + Service_Option);
			sb.append(",Percentage_Listened="
					+ String.valueOf(Percentage_Listened));
			sb.append(",Call_Source=" + Call_Source);
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Duration_In_Pulse=" + String.valueOf(Duration_In_Pulse));
			sb.append(",Call_Start_Time=" + String.valueOf(Call_Start_Time));
			sb.append(",Call_End_Time=" + String.valueOf(Call_End_Time));
			sb.append(",Attempt_Number=" + String.valueOf(Attempt_Number));
			sb.append(",Subscription_Start_Date="
					+ String.valueOf(Subscription_Start_Date));
			sb.append(",msg_duration=" + String.valueOf(msg_duration));
			sb.append(",modificationDate=" + modificationDate);
			sb.append(",call_duration=" + String.valueOf(call_duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Operator_ID,
					other.Operator_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Subscription_Pack_ID,
					other.Subscription_Pack_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Campaign_ID,
					other.Campaign_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Start_Date_ID,
					other.Start_Date_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.End_Date_ID,
					other.End_Date_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Start_Time_ID,
					other.Start_Time_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.End_Time_ID,
					other.End_Time_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Call_Start_Time,
					other.Call_Start_Time);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class inbox_call_measure_dataStruct implements
			routines.system.IPersistableRow<inbox_call_measure_dataStruct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Operator_ID;

		public long getOperator_ID() {
			return this.Operator_ID;
		}

		public long Subscription_Pack_ID;

		public long getSubscription_Pack_ID() {
			return this.Subscription_Pack_ID;
		}

		public long Campaign_ID;

		public long getCampaign_ID() {
			return this.Campaign_ID;
		}

		public int Start_Date_ID;

		public int getStart_Date_ID() {
			return this.Start_Date_ID;
		}

		public int End_Date_ID;

		public int getEnd_Date_ID() {
			return this.End_Date_ID;
		}

		public int Start_Time_ID;

		public int getStart_Time_ID() {
			return this.Start_Time_ID;
		}

		public int End_Time_ID;

		public int getEnd_Time_ID() {
			return this.End_Time_ID;
		}

		public Long State_ID;

		public Long getState_ID() {
			return this.State_ID;
		}

		public String Call_Status;

		public String getCall_Status() {
			return this.Call_Status;
		}

		public Integer Duration;

		public Integer getDuration() {
			return this.Duration;
		}

		public String Service_Option;

		public String getService_Option() {
			return this.Service_Option;
		}

		public Integer Percentage_Listened;

		public Integer getPercentage_Listened() {
			return this.Percentage_Listened;
		}

		public String Call_Source;

		public String getCall_Source() {
			return this.Call_Source;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public Integer Duration_In_Pulse;

		public Integer getDuration_In_Pulse() {
			return this.Duration_In_Pulse;
		}

		public java.util.Date Call_Start_Time;

		public java.util.Date getCall_Start_Time() {
			return this.Call_Start_Time;
		}

		public java.util.Date Call_End_Time;

		public java.util.Date getCall_End_Time() {
			return this.Call_End_Time;
		}

		public Integer Attempt_Number;

		public Integer getAttempt_Number() {
			return this.Attempt_Number;
		}

		public java.util.Date Subscription_Start_Date;

		public java.util.Date getSubscription_Start_Date() {
			return this.Subscription_Start_Date;
		}

		public Integer msg_duration;

		public Integer getMsg_duration() {
			return this.msg_duration;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		public Integer call_duration;

		public Integer getCall_duration() {
			return this.call_duration;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				result = prime * result + (int) this.Operator_ID;

				result = prime * result + (int) this.Subscription_Pack_ID;

				result = prime * result + (int) this.Campaign_ID;

				result = prime * result + (int) this.Start_Date_ID;

				result = prime * result + (int) this.End_Date_ID;

				result = prime * result + (int) this.Start_Time_ID;

				result = prime * result + (int) this.End_Time_ID;

				result = prime
						* result
						+ ((this.Call_Start_Time == null) ? 0
								: this.Call_Start_Time.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final inbox_call_measure_dataStruct other = (inbox_call_measure_dataStruct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			if (this.Operator_ID != other.Operator_ID)
				return false;

			if (this.Subscription_Pack_ID != other.Subscription_Pack_ID)
				return false;

			if (this.Campaign_ID != other.Campaign_ID)
				return false;

			if (this.Start_Date_ID != other.Start_Date_ID)
				return false;

			if (this.End_Date_ID != other.End_Date_ID)
				return false;

			if (this.Start_Time_ID != other.Start_Time_ID)
				return false;

			if (this.End_Time_ID != other.End_Time_ID)
				return false;

			if (this.Call_Start_Time == null) {
				if (other.Call_Start_Time != null)
					return false;

			} else if (!this.Call_Start_Time.equals(other.Call_Start_Time))

				return false;

			return true;
		}

		public void copyDataTo(inbox_call_measure_dataStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Operator_ID = this.Operator_ID;
			other.Subscription_Pack_ID = this.Subscription_Pack_ID;
			other.Campaign_ID = this.Campaign_ID;
			other.Start_Date_ID = this.Start_Date_ID;
			other.End_Date_ID = this.End_Date_ID;
			other.Start_Time_ID = this.Start_Time_ID;
			other.End_Time_ID = this.End_Time_ID;
			other.State_ID = this.State_ID;
			other.Call_Status = this.Call_Status;
			other.Duration = this.Duration;
			other.Service_Option = this.Service_Option;
			other.Percentage_Listened = this.Percentage_Listened;
			other.Call_Source = this.Call_Source;
			other.Subscription_Status = this.Subscription_Status;
			other.Duration_In_Pulse = this.Duration_In_Pulse;
			other.Call_Start_Time = this.Call_Start_Time;
			other.Call_End_Time = this.Call_End_Time;
			other.Attempt_Number = this.Attempt_Number;
			other.Subscription_Start_Date = this.Subscription_Start_Date;
			other.msg_duration = this.msg_duration;
			other.modificationDate = this.modificationDate;
			other.call_duration = this.call_duration;

		}

		public void copyKeysDataTo(inbox_call_measure_dataStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Operator_ID = this.Operator_ID;
			other.Subscription_Pack_ID = this.Subscription_Pack_ID;
			other.Campaign_ID = this.Campaign_ID;
			other.Start_Date_ID = this.Start_Date_ID;
			other.End_Date_ID = this.End_Date_ID;
			other.Start_Time_ID = this.Start_Time_ID;
			other.End_Time_ID = this.End_Time_ID;
			other.Call_Start_Time = this.Call_Start_Time;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length == 0) {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Operator_ID = dis.readLong();

					this.Subscription_Pack_ID = dis.readLong();

					this.Campaign_ID = dis.readLong();

					this.Start_Date_ID = dis.readInt();

					this.End_Date_ID = dis.readInt();

					this.Start_Time_ID = dis.readInt();

					this.End_Time_ID = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.State_ID = null;
					} else {
						this.State_ID = dis.readLong();
					}

					this.Call_Status = readString(dis);

					this.Duration = readInteger(dis);

					this.Service_Option = readString(dis);

					this.Percentage_Listened = readInteger(dis);

					this.Call_Source = readString(dis);

					this.Subscription_Status = readString(dis);

					this.Duration_In_Pulse = readInteger(dis);

					this.Call_Start_Time = readDate(dis);

					this.Call_End_Time = readDate(dis);

					this.Attempt_Number = readInteger(dis);

					this.Subscription_Start_Date = readDate(dis);

					this.msg_duration = readInteger(dis);

					this.modificationDate = readString(dis);

					this.call_duration = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Operator_ID);

				// long

				dos.writeLong(this.Subscription_Pack_ID);

				// long

				dos.writeLong(this.Campaign_ID);

				// int

				dos.writeInt(this.Start_Date_ID);

				// int

				dos.writeInt(this.End_Date_ID);

				// int

				dos.writeInt(this.Start_Time_ID);

				// int

				dos.writeInt(this.End_Time_ID);

				// Long

				if (this.State_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.State_ID);
				}

				// String

				writeString(this.Call_Status, dos);

				// Integer

				writeInteger(this.Duration, dos);

				// String

				writeString(this.Service_Option, dos);

				// Integer

				writeInteger(this.Percentage_Listened, dos);

				// String

				writeString(this.Call_Source, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// Integer

				writeInteger(this.Duration_In_Pulse, dos);

				// java.util.Date

				writeDate(this.Call_Start_Time, dos);

				// java.util.Date

				writeDate(this.Call_End_Time, dos);

				// Integer

				writeInteger(this.Attempt_Number, dos);

				// java.util.Date

				writeDate(this.Subscription_Start_Date, dos);

				// Integer

				writeInteger(this.msg_duration, dos);

				// String

				writeString(this.modificationDate, dos);

				// Integer

				writeInteger(this.call_duration, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Subscription_Pack_ID="
					+ String.valueOf(Subscription_Pack_ID));
			sb.append(",Campaign_ID=" + String.valueOf(Campaign_ID));
			sb.append(",Start_Date_ID=" + String.valueOf(Start_Date_ID));
			sb.append(",End_Date_ID=" + String.valueOf(End_Date_ID));
			sb.append(",Start_Time_ID=" + String.valueOf(Start_Time_ID));
			sb.append(",End_Time_ID=" + String.valueOf(End_Time_ID));
			sb.append(",State_ID=" + String.valueOf(State_ID));
			sb.append(",Call_Status=" + Call_Status);
			sb.append(",Duration=" + String.valueOf(Duration));
			sb.append(",Service_Option=" + Service_Option);
			sb.append(",Percentage_Listened="
					+ String.valueOf(Percentage_Listened));
			sb.append(",Call_Source=" + Call_Source);
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Duration_In_Pulse=" + String.valueOf(Duration_In_Pulse));
			sb.append(",Call_Start_Time=" + String.valueOf(Call_Start_Time));
			sb.append(",Call_End_Time=" + String.valueOf(Call_End_Time));
			sb.append(",Attempt_Number=" + String.valueOf(Attempt_Number));
			sb.append(",Subscription_Start_Date="
					+ String.valueOf(Subscription_Start_Date));
			sb.append(",msg_duration=" + String.valueOf(msg_duration));
			sb.append(",modificationDate=" + modificationDate);
			sb.append(",call_duration=" + String.valueOf(call_duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(inbox_call_measure_dataStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Operator_ID,
					other.Operator_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Subscription_Pack_ID,
					other.Subscription_Pack_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Campaign_ID,
					other.Campaign_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Start_Date_ID,
					other.Start_Date_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.End_Date_ID,
					other.End_Date_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Start_Time_ID,
					other.Start_Time_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.End_Time_ID,
					other.End_Time_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Call_Start_Time,
					other.Call_Start_Time);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[0];

		public Long Subscription_ID;

		public Long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public String Operator;

		public String getOperator() {
			return this.Operator;
		}

		public Long Subscription_Pack_ID;

		public Long getSubscription_Pack_ID() {
			return this.Subscription_Pack_ID;
		}

		public String Call_Status;

		public String getCall_Status() {
			return this.Call_Status;
		}

		public String Week_ID;

		public String getWeek_ID() {
			return this.Week_ID;
		}

		public Long Start_Date;

		public Long getStart_Date() {
			return this.Start_Date;
		}

		public Long End_Date;

		public Long getEnd_Date() {
			return this.End_Date;
		}

		public Integer Duration;

		public Integer getDuration() {
			return this.Duration;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public Integer Duration_In_Pulses;

		public Integer getDuration_In_Pulses() {
			return this.Duration_In_Pulses;
		}

		public Integer Percentage_Listened;

		public Integer getPercentage_Listened() {
			return this.Percentage_Listened;
		}

		public String Subscription_Pack_Name;

		public String getSubscription_Pack_Name() {
			return this.Subscription_Pack_Name;
		}

		public Integer Messages_Per_Week;

		public Integer getMessages_Per_Week() {
			return this.Messages_Per_Week;
		}

		public Integer Attempt_Number;

		public Integer getAttempt_Number() {
			return this.Attempt_Number;
		}

		public java.util.Date Subscription_Start_Date;

		public java.util.Date getSubscription_Start_Date() {
			return this.Subscription_Start_Date;
		}

		public Integer msg_duration;

		public Integer getMsg_duration() {
			return this.msg_duration;
		}

		public String modificationDate;

		public String getModificationDate() {
			return this.modificationDate;
		}

		public Integer call_duration;

		public Integer getCall_duration() {
			return this.call_duration;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD.length == 0) {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriber_call_measure_OBD,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriber_call_measure_OBD) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Subscription_ID = null;
					} else {
						this.Subscription_ID = dis.readLong();
					}

					this.Operator = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Subscription_Pack_ID = null;
					} else {
						this.Subscription_Pack_ID = dis.readLong();
					}

					this.Call_Status = readString(dis);

					this.Week_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Start_Date = null;
					} else {
						this.Start_Date = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.End_Date = null;
					} else {
						this.End_Date = dis.readLong();
					}

					this.Duration = readInteger(dis);

					this.Subscription_Status = readString(dis);

					this.Duration_In_Pulses = readInteger(dis);

					this.Percentage_Listened = readInteger(dis);

					this.Subscription_Pack_Name = readString(dis);

					this.Messages_Per_Week = readInteger(dis);

					this.Attempt_Number = readInteger(dis);

					this.Subscription_Start_Date = readDate(dis);

					this.msg_duration = readInteger(dis);

					this.modificationDate = readString(dis);

					this.call_duration = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Subscription_ID);
				}

				// String

				writeString(this.Operator, dos);

				// Long

				if (this.Subscription_Pack_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Subscription_Pack_ID);
				}

				// String

				writeString(this.Call_Status, dos);

				// String

				writeString(this.Week_ID, dos);

				// Long

				if (this.Start_Date == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Start_Date);
				}

				// Long

				if (this.End_Date == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.End_Date);
				}

				// Integer

				writeInteger(this.Duration, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// Integer

				writeInteger(this.Duration_In_Pulses, dos);

				// Integer

				writeInteger(this.Percentage_Listened, dos);

				// String

				writeString(this.Subscription_Pack_Name, dos);

				// Integer

				writeInteger(this.Messages_Per_Week, dos);

				// Integer

				writeInteger(this.Attempt_Number, dos);

				// java.util.Date

				writeDate(this.Subscription_Start_Date, dos);

				// Integer

				writeInteger(this.msg_duration, dos);

				// String

				writeString(this.modificationDate, dos);

				// Integer

				writeInteger(this.call_duration, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Operator=" + Operator);
			sb.append(",Subscription_Pack_ID="
					+ String.valueOf(Subscription_Pack_ID));
			sb.append(",Call_Status=" + Call_Status);
			sb.append(",Week_ID=" + Week_ID);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Duration=" + String.valueOf(Duration));
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Duration_In_Pulses="
					+ String.valueOf(Duration_In_Pulses));
			sb.append(",Percentage_Listened="
					+ String.valueOf(Percentage_Listened));
			sb.append(",Subscription_Pack_Name=" + Subscription_Pack_Name);
			sb.append(",Messages_Per_Week=" + String.valueOf(Messages_Per_Week));
			sb.append(",Attempt_Number=" + String.valueOf(Attempt_Number));
			sb.append(",Subscription_Start_Date="
					+ String.valueOf(Subscription_Start_Date));
			sb.append(",msg_duration=" + String.valueOf(msg_duration));
			sb.append(",modificationDate=" + modificationDate);
			sb.append(",call_duration=" + String.valueOf(call_duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				inbox_call_measure_dataStruct inbox_call_measure_data = new inbox_call_measure_dataStruct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				insert_subscription_status_measureStruct insert_subscription_status_measure = new insert_subscription_status_measureStruct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "subscription_status_measure";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = context.report_AdditionalParams;
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = context.report_AdditionalParams;
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ properties_tMysqlOutput_2;
				}
				String driverClass_tMysqlOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_2 = context.report_login;

				final String decryptedPassword_tMysqlOutput_2 = context.report_password;

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
				java.lang.Class.forName(driverClass_tMysqlOutput_2);

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "subscription_status_measure"
						+ "` (`Subscription_ID`,`Date_ID`,`Time_ID`,`Operator_ID`,`Status`,`Last_Modified_Time`) VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_subscription_status_measureStruct insert_subscription_status_measure_tmp = new insert_subscription_status_measureStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "subscriber_call_measure";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = context.report_AdditionalParams;
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = context.report_AdditionalParams;
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ properties_tMysqlOutput_1;
				}
				String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_1 = context.report_login;

				final String decryptedPassword_tMysqlOutput_1 = context.report_password;

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
				java.lang.Class.forName(driverClass_tMysqlOutput_1);

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "subscriber_call_measure"
						+ "` (`Subscription_ID`,`Operator_ID`,`Subscription_Pack_ID`,`Campaign_ID`,`Start_Date_ID`,`End_Date_ID`,`Start_Time_ID`,`End_Time_ID`,`State_ID`,`Call_Status`,`Duration`,`Service_Option`,`Percentage_Listened`,`Call_Source`,`Subscription_Status`,`Duration_In_Pulse`,`Call_Start_Time`,`Call_End_Time`,`Attempt_Number`,`Subscription_Start_Date`,`msg_duration`,`modificationDate`,`call_duration`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				inbox_call_measure_dataStruct inbox_call_measure_data_tmp = new inbox_call_measure_dataStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_1);
				String dbUser_tMysqlInput_1 = context.motech_login;

				final String decryptedPassword_tMysqlInput_1 = context.motech_password;

				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://"
						+ context.motech_server + ":" + context.motech_port
						+ "/" + context.motech_database + "?"
						+ context.motech_additionalParams;

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT sbs.id as 'Subscription_ID',cdr.operatorId as 'Operator',\nsbs.subscriptionPack_id_OID as 'Subscription_Pack_ID', \ncdr.callStatus as 'Call_Status',cdr.weekId as 'Week_ID', \ncdr.callStartTime as 'Start_Date', \ncdr.callEndTime as 'End_Date', \ncdr.callEndTime-cdr.callStartTime as 'Duration',\n'ACTIVE' as 'Subscription_Status', \ncdr.callDurationInPulse as 'Duration_In_Pulses', \nRound((((cdr.msgPlayEndTime-cdr.msgPlayStartTime)/spm.duration)*100),0) as 'Percentage_Listened',\nsp.name as 'Subscription_Pack_Name', sp.messagesPerWeek as 'Messages_Per_Week',\ncdr.attemptNo as 'Attempt_Number',\nsbs.startDate as 'Subscription_Start_Date',\n(cdr.msgPlayEndTime-cdr.msgPlayStartTime) as 'msg_duration',\ncdr.modificationDate,\nIF(cdr.callEndTime>0 AND cdr.callAnswerTime>0,cdr.callEndTime-cdr.callAnswerTime,NULL) as 'call_duration'\nFROM nms_imi_cdrs cdr \nInner join nms_subscriptions sbs  on SUBSTRING_INDEX(cdr.requestId, ':', -1)=sbs.subscriptionId \nInner join nms_subscription_packs sp on sbs.subscriptionPack_id_OID=sp.id \nInner join nms_subscription_pack_messages spm \non (sp.id=spm.messages_id_OWN  and cdr.weekId=spm.weekId)\nWHERE cdr.creationDate>'"
						+ (String) globalMap.get("lastEtlTime")
						+ "'\norder by cdr.callStartTime ASC";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);

				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.Subscription_ID = null;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row1.Subscription_ID = rs_tMysqlInput_1
										.getLong(1);
							} else {
								row1.Subscription_ID = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.Operator = null;
						} else {

							row1.Operator = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_1, 2, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.Subscription_Pack_ID = null;
						} else {

							if (rs_tMysqlInput_1.getObject(3) != null) {
								row1.Subscription_Pack_ID = rs_tMysqlInput_1
										.getLong(3);
							} else {
								row1.Subscription_Pack_ID = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.Call_Status = null;
						} else {

							row1.Call_Status = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 4, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.Week_ID = null;
						} else {

							row1.Week_ID = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_1, 5, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 6) {
							row1.Start_Date = null;
						} else {

							if (rs_tMysqlInput_1.getObject(6) != null) {
								row1.Start_Date = rs_tMysqlInput_1.getLong(6);
							} else {
								row1.Start_Date = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 7) {
							row1.End_Date = null;
						} else {

							if (rs_tMysqlInput_1.getObject(7) != null) {
								row1.End_Date = rs_tMysqlInput_1.getLong(7);
							} else {
								row1.End_Date = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 8) {
							row1.Duration = null;
						} else {

							if (rs_tMysqlInput_1.getObject(8) != null) {
								row1.Duration = rs_tMysqlInput_1.getInt(8);
							} else {
								row1.Duration = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 9) {
							row1.Subscription_Status = null;
						} else {

							row1.Subscription_Status = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 9, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 10) {
							row1.Duration_In_Pulses = null;
						} else {

							if (rs_tMysqlInput_1.getObject(10) != null) {
								row1.Duration_In_Pulses = rs_tMysqlInput_1
										.getInt(10);
							} else {
								row1.Duration_In_Pulses = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 11) {
							row1.Percentage_Listened = null;
						} else {

							if (rs_tMysqlInput_1.getObject(11) != null) {
								row1.Percentage_Listened = rs_tMysqlInput_1
										.getInt(11);
							} else {
								row1.Percentage_Listened = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 12) {
							row1.Subscription_Pack_Name = null;
						} else {

							row1.Subscription_Pack_Name = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 12, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 13) {
							row1.Messages_Per_Week = null;
						} else {

							if (rs_tMysqlInput_1.getObject(13) != null) {
								row1.Messages_Per_Week = rs_tMysqlInput_1
										.getInt(13);
							} else {
								row1.Messages_Per_Week = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 14) {
							row1.Attempt_Number = null;
						} else {

							if (rs_tMysqlInput_1.getObject(14) != null) {
								row1.Attempt_Number = rs_tMysqlInput_1
										.getInt(14);
							} else {
								row1.Attempt_Number = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 15) {
							row1.Subscription_Start_Date = null;
						} else {

							if (rs_tMysqlInput_1.getString(15) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(15);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.Subscription_Start_Date = rs_tMysqlInput_1
											.getTimestamp(15);
								} else {
									row1.Subscription_Start_Date = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.Subscription_Start_Date = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 16) {
							row1.msg_duration = null;
						} else {

							if (rs_tMysqlInput_1.getObject(16) != null) {
								row1.msg_duration = rs_tMysqlInput_1.getInt(16);
							} else {
								row1.msg_duration = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 17) {
							row1.modificationDate = null;
						} else {

							row1.modificationDate = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 17, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 18) {
							row1.call_duration = null;
						} else {

							if (rs_tMysqlInput_1.getObject(18) != null) {
								row1.call_duration = rs_tMysqlInput_1
										.getInt(18);
							} else {
								row1.call_duration = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							inbox_call_measure_data = null;

							// # Output table : 'inbox_call_measure_data'
							inbox_call_measure_data_tmp.Subscription_ID = row1.Subscription_ID;
							inbox_call_measure_data_tmp.Operator_ID = ReportingHelper
									.getOperator(
											row1.Operator,
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_1"),
											globalMap);
							inbox_call_measure_data_tmp.Subscription_Pack_ID = row1.Subscription_Pack_ID;
							inbox_call_measure_data_tmp.Campaign_ID = ReportingHelper
									.getCampaignId(row1.Week_ID,
											row1.Subscription_Pack_Name,
											row1.Messages_Per_Week,
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_1"));
							inbox_call_measure_data_tmp.Start_Date_ID = ReportingHelper
									.getDateId(new java.util.Date(
											row1.Start_Date * 1000),
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_1"));
							inbox_call_measure_data_tmp.End_Date_ID = ReportingHelper
									.getDateId(new java.util.Date(
											row1.End_Date * 1000),
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_1"));
							inbox_call_measure_data_tmp.Start_Time_ID = ReportingHelper
									.getTimeId(new java.util.Date(
											row1.Start_Date * 1000),
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_1"));
							inbox_call_measure_data_tmp.End_Time_ID = ReportingHelper
									.getTimeId(new java.util.Date(
											row1.End_Date * 1000),
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_1"));
							inbox_call_measure_data_tmp.State_ID = null;
							inbox_call_measure_data_tmp.Call_Status = ReportingHelper.CallStatusOBD
									.getFor(row1.Call_Status);
							inbox_call_measure_data_tmp.Duration = row1.Duration;
							inbox_call_measure_data_tmp.Service_Option = null;
							inbox_call_measure_data_tmp.Percentage_Listened = row1.Percentage_Listened;
							inbox_call_measure_data_tmp.Call_Source = "OBD";
							inbox_call_measure_data_tmp.Subscription_Status = row1.Subscription_Status;
							inbox_call_measure_data_tmp.Duration_In_Pulse = row1.Duration_In_Pulses;
							inbox_call_measure_data_tmp.Call_Start_Time = new java.util.Date(
									row1.Start_Date * 1000);
							inbox_call_measure_data_tmp.Call_End_Time = new java.util.Date(
									row1.End_Date * 1000);
							inbox_call_measure_data_tmp.Attempt_Number = row1.Attempt_Number;
							inbox_call_measure_data_tmp.Subscription_Start_Date = row1.Subscription_Start_Date;
							inbox_call_measure_data_tmp.msg_duration = row1.msg_duration;
							inbox_call_measure_data_tmp.modificationDate = row1.modificationDate;
							inbox_call_measure_data_tmp.call_duration = row1.call_duration;
							inbox_call_measure_data = inbox_call_measure_data_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "inbox_call_measure_data"
						if (inbox_call_measure_data != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							row2 = null;
							whetherReject_tMysqlOutput_1 = false;
							pstmt_tMysqlOutput_1.setLong(1,
									inbox_call_measure_data.Subscription_ID);

							pstmt_tMysqlOutput_1.setLong(2,
									inbox_call_measure_data.Operator_ID);

							pstmt_tMysqlOutput_1
									.setLong(
											3,
											inbox_call_measure_data.Subscription_Pack_ID);

							pstmt_tMysqlOutput_1.setLong(4,
									inbox_call_measure_data.Campaign_ID);

							pstmt_tMysqlOutput_1.setInt(5,
									inbox_call_measure_data.Start_Date_ID);

							pstmt_tMysqlOutput_1.setInt(6,
									inbox_call_measure_data.End_Date_ID);

							pstmt_tMysqlOutput_1.setInt(7,
									inbox_call_measure_data.Start_Time_ID);

							pstmt_tMysqlOutput_1.setInt(8,
									inbox_call_measure_data.End_Time_ID);

							if (inbox_call_measure_data.State_ID == null) {
								pstmt_tMysqlOutput_1.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setLong(9,
										inbox_call_measure_data.State_ID);
							}

							if (inbox_call_measure_data.Call_Status == null) {
								pstmt_tMysqlOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(10,
										inbox_call_measure_data.Call_Status);
							}

							if (inbox_call_measure_data.Duration == null) {
								pstmt_tMysqlOutput_1.setNull(11,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(11,
										inbox_call_measure_data.Duration);
							}

							if (inbox_call_measure_data.Service_Option == null) {
								pstmt_tMysqlOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(12,
										inbox_call_measure_data.Service_Option);
							}

							if (inbox_call_measure_data.Percentage_Listened == null) {
								pstmt_tMysqlOutput_1.setNull(13,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setInt(13,
												inbox_call_measure_data.Percentage_Listened);
							}

							if (inbox_call_measure_data.Call_Source == null) {
								pstmt_tMysqlOutput_1.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(14,
										inbox_call_measure_data.Call_Source);
							}

							if (inbox_call_measure_data.Subscription_Status == null) {
								pstmt_tMysqlOutput_1.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(
												15,
												inbox_call_measure_data.Subscription_Status);
							}

							if (inbox_call_measure_data.Duration_In_Pulse == null) {
								pstmt_tMysqlOutput_1.setNull(16,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setInt(16,
												inbox_call_measure_data.Duration_In_Pulse);
							}

							if (inbox_call_measure_data.Call_Start_Time != null) {
								date_tMysqlOutput_1 = inbox_call_measure_data.Call_Start_Time
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(17,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(17,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(17,
										java.sql.Types.DATE);
							}

							if (inbox_call_measure_data.Call_End_Time != null) {
								date_tMysqlOutput_1 = inbox_call_measure_data.Call_End_Time
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(18,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(18,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(18,
										java.sql.Types.DATE);
							}

							if (inbox_call_measure_data.Attempt_Number == null) {
								pstmt_tMysqlOutput_1.setNull(19,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(19,
										inbox_call_measure_data.Attempt_Number);
							}

							if (inbox_call_measure_data.Subscription_Start_Date != null) {
								date_tMysqlOutput_1 = inbox_call_measure_data.Subscription_Start_Date
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(20,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(20,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(20,
										java.sql.Types.DATE);
							}

							if (inbox_call_measure_data.msg_duration == null) {
								pstmt_tMysqlOutput_1.setNull(21,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(21,
										inbox_call_measure_data.msg_duration);
							}

							if (inbox_call_measure_data.modificationDate == null) {
								pstmt_tMysqlOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(
												22,
												inbox_call_measure_data.modificationDate);
							}

							if (inbox_call_measure_data.call_duration == null) {
								pstmt_tMysqlOutput_1.setNull(23,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(23,
										inbox_call_measure_data.call_duration);
							}

							try {
								nb_line_tMysqlOutput_1++;
								insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
										+ pstmt_tMysqlOutput_1.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_1 = true;
								System.err.print(e.getMessage());
							}
							if (!whetherReject_tMysqlOutput_1) {
								row2 = new row2Struct();
								row2.Subscription_ID = inbox_call_measure_data.Subscription_ID;
								row2.Operator_ID = inbox_call_measure_data.Operator_ID;
								row2.Subscription_Pack_ID = inbox_call_measure_data.Subscription_Pack_ID;
								row2.Campaign_ID = inbox_call_measure_data.Campaign_ID;
								row2.Start_Date_ID = inbox_call_measure_data.Start_Date_ID;
								row2.End_Date_ID = inbox_call_measure_data.End_Date_ID;
								row2.Start_Time_ID = inbox_call_measure_data.Start_Time_ID;
								row2.End_Time_ID = inbox_call_measure_data.End_Time_ID;
								row2.State_ID = inbox_call_measure_data.State_ID;
								row2.Call_Status = inbox_call_measure_data.Call_Status;
								row2.Duration = inbox_call_measure_data.Duration;
								row2.Service_Option = inbox_call_measure_data.Service_Option;
								row2.Percentage_Listened = inbox_call_measure_data.Percentage_Listened;
								row2.Call_Source = inbox_call_measure_data.Call_Source;
								row2.Subscription_Status = inbox_call_measure_data.Subscription_Status;
								row2.Duration_In_Pulse = inbox_call_measure_data.Duration_In_Pulse;
								row2.Call_Start_Time = inbox_call_measure_data.Call_Start_Time;
								row2.Call_End_Time = inbox_call_measure_data.Call_End_Time;
								row2.Attempt_Number = inbox_call_measure_data.Attempt_Number;
								row2.Subscription_Start_Date = inbox_call_measure_data.Subscription_Start_Date;
								row2.msg_duration = inbox_call_measure_data.msg_duration;
								row2.modificationDate = inbox_call_measure_data.modificationDate;
								row2.call_duration = inbox_call_measure_data.call_duration;
							}
							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								conn_tMysqlOutput_1.commit();
								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								row3 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
										"&&");
								ope_tFilterRow_1
										.matches(
												(row2.Call_Source == null ? false
														: row2.Call_Source
																.compareTo("OBD") == 0),
												"Call_Source.compareTo(\"OBD\") == 0 failed");
								ope_tFilterRow_1
										.matches(
												(row2.Call_Status == null ? false
														: row2.Call_Status
																.compareTo("SUCCESS") == 0),
												"Call_Status.compareTo(\"SUCCESS\") == 0 failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row3 == null) {
										row3 = new row3Struct();
									}
									row3.Subscription_ID = row2.Subscription_ID;
									row3.Operator_ID = row2.Operator_ID;
									row3.Subscription_Pack_ID = row2.Subscription_Pack_ID;
									row3.Campaign_ID = row2.Campaign_ID;
									row3.Start_Date_ID = row2.Start_Date_ID;
									row3.End_Date_ID = row2.End_Date_ID;
									row3.Start_Time_ID = row2.Start_Time_ID;
									row3.End_Time_ID = row2.End_Time_ID;
									row3.State_ID = row2.State_ID;
									row3.Call_Status = row2.Call_Status;
									row3.Duration = row2.Duration;
									row3.Service_Option = row2.Service_Option;
									row3.Percentage_Listened = row2.Percentage_Listened;
									row3.Call_Source = row2.Call_Source;
									row3.Subscription_Status = row2.Subscription_Status;
									row3.Duration_In_Pulse = row2.Duration_In_Pulse;
									row3.Call_Start_Time = row2.Call_Start_Time;
									row3.Call_End_Time = row2.Call_End_Time;
									row3.Attempt_Number = row2.Attempt_Number;
									row3.Subscription_Start_Date = row2.Subscription_Start_Date;
									row3.msg_duration = row2.msg_duration;
									row3.modificationDate = row2.modificationDate;
									row3.call_duration = row2.call_duration;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */
								// Start of branch "row3"
								if (row3 != null) {

									/**
									 * [tMap_2 main ] start
									 */

									currentComponent = "tMap_2";

									boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_2 = false;
									boolean mainRowRejected_tMap_2 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										insert_subscription_status_measure = null;

										// # Output table :
										// 'insert_subscription_status_measure'
										insert_subscription_status_measure_tmp.Subscription_ID = row3.Subscription_ID;
										insert_subscription_status_measure_tmp.Date_ID = row3.Start_Date_ID;
										insert_subscription_status_measure_tmp.Time_ID = row3.Start_Time_ID;
										insert_subscription_status_measure_tmp.Operator_ID = row3.Operator_ID;
										insert_subscription_status_measure_tmp.Status = row3.Subscription_Status;
										insert_subscription_status_measure_tmp.Last_Modified_Time = ReportingHelper
												.getDateFromId(
														row3.Start_Date_ID,
														(java.sql.Connection) resourceMap
																.get("conn_tMysqlOutput_1"));
										insert_subscription_status_measure = insert_subscription_status_measure_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */
									// Start of branch
									// "insert_subscription_status_measure"
									if (insert_subscription_status_measure != null) {

										/**
										 * [tMysqlOutput_2 main ] start
										 */

										currentComponent = "tMysqlOutput_2";

										whetherReject_tMysqlOutput_2 = false;
										pstmt_tMysqlOutput_2
												.setLong(
														1,
														insert_subscription_status_measure.Subscription_ID);

										pstmt_tMysqlOutput_2
												.setInt(2,
														insert_subscription_status_measure.Date_ID);

										pstmt_tMysqlOutput_2
												.setInt(3,
														insert_subscription_status_measure.Time_ID);

										pstmt_tMysqlOutput_2
												.setLong(
														4,
														insert_subscription_status_measure.Operator_ID);

										if (insert_subscription_status_measure.Status == null) {
											pstmt_tMysqlOutput_2.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_2
													.setString(
															5,
															insert_subscription_status_measure.Status);
										}

										if (insert_subscription_status_measure.Last_Modified_Time != null) {
											date_tMysqlOutput_2 = insert_subscription_status_measure.Last_Modified_Time
													.getTime();
											if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
													|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
												pstmt_tMysqlOutput_2.setString(
														6,
														"0000-00-00 00:00:00");
											} else {
												pstmt_tMysqlOutput_2
														.setTimestamp(
																6,
																new java.sql.Timestamp(
																		date_tMysqlOutput_2));
											}
										} else {
											pstmt_tMysqlOutput_2.setNull(6,
													java.sql.Types.DATE);
										}

										try {
											nb_line_tMysqlOutput_2++;
											insertedCount_tMysqlOutput_2 = insertedCount_tMysqlOutput_2
													+ pstmt_tMysqlOutput_2
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_2 = true;
											System.err.print(e.getMessage());
										}
										if (!whetherReject_tMysqlOutput_2) {
										}
										commitCounter_tMysqlOutput_2++;

										if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

											conn_tMysqlOutput_2.commit();
											commitCounter_tMysqlOutput_2 = 0;

										}

										tos_count_tMysqlOutput_2++;

										/**
										 * [tMysqlOutput_2 main ] stop
										 */

									} // End of branch
										// "insert_subscription_status_measure"

								} // End of branch "row3"

							} // End of branch "row2"

						} // End of branch "inbox_call_measure_data"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();
					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {

						conn_tMysqlInput_1.close();

					}

				}

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				if (commitCounter_tMysqlOutput_1 > 0) {

					conn_tMysqlOutput_1.commit();

				}

				conn_tMysqlOutput_1.close();

				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				if (commitCounter_tMysqlOutput_2 > 0) {

					conn_tMysqlOutput_2.commit();

				}

				conn_tMysqlOutput_2.close();

				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				tMysqlRow_1Process(globalMap);

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :"
									+ sqlEx_tMysqlOutput_1.getMessage();

							System.err.println(errorMessage_tMysqlOutput_1);
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (resourceMap.get("finish_tMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
							String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :"
									+ sqlEx_tMysqlOutput_2.getMessage();

							System.err.println(errorMessage_tMysqlOutput_2);
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_1 begin ] start
				 */

				ok_Hash.put("tMysqlRow_1", false);
				start_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				currentComponent = "tMysqlRow_1";

				int tos_count_tMysqlRow_1 = 0;

				java.sql.Connection conn_tMysqlRow_1 = null;
				String query_tMysqlRow_1 = "";
				boolean whetherReject_tMysqlRow_1 = false;
				String driverClass_tMysqlRow_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlRow_1);

				String url_tMysqlRow_1 = "jdbc:mysql://"
						+ context.report_server + ":" + context.report_port
						+ "/" + context.report_database + "?"
						+ context.report_AdditionalParams;
				String dbUser_tMysqlRow_1 = context.report_login;

				final String decryptedPassword_tMysqlRow_1 = context.report_password;

				String dbPwd_tMysqlRow_1 = decryptedPassword_tMysqlRow_1;

				conn_tMysqlRow_1 = java.sql.DriverManager.getConnection(
						url_tMysqlRow_1, dbUser_tMysqlRow_1, dbPwd_tMysqlRow_1);

				if (conn_tMysqlRow_1.getAutoCommit()) {

					conn_tMysqlRow_1.setAutoCommit(false);

				}
				int commitEvery_tMysqlRow_1 = 10000;
				int commitCounter_tMysqlRow_1 = 0;

				java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1
						.createStatement();

				/**
				 * [tMysqlRow_1 begin ] stop
				 */

				/**
				 * [tMysqlRow_1 main ] start
				 */

				currentComponent = "tMysqlRow_1";

				query_tMysqlRow_1 = "UPDATE ETL_info_table SET ETL_info_table.last_etl_time = (SELECT max(modificationDate) from subscriber_call_measure\nWHERE call_source='OBD'),\nETL_info_table.record_count=(SELECT COUNT(*) from subscriber_call_measure\nWHERE call_source='OBD')\nWHERE ETL_info_table.table_id = 13";
				whetherReject_tMysqlRow_1 = false;
				globalMap.put("tMysqlRow_1_QUERY", query_tMysqlRow_1);
				try {
					stmt_tMysqlRow_1.execute(query_tMysqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_1 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tMysqlRow_1++;
				if (commitEvery_tMysqlRow_1 <= commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;
				}

				tos_count_tMysqlRow_1++;

				/**
				 * [tMysqlRow_1 main ] stop
				 */

				/**
				 * [tMysqlRow_1 end ] start
				 */

				currentComponent = "tMysqlRow_1";

				stmt_tMysqlRow_1.close();
				if (commitEvery_tMysqlRow_1 > commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;

				}
				conn_tMysqlRow_1.close();

				ok_Hash.put("tMysqlRow_1", true);
				end_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				/**
				 * [tMysqlRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_1 finally ] start
				 */

				currentComponent = "tMysqlRow_1";

				/**
				 * [tMysqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Subscriber_call_measure_OBD Subscriber_call_measure_OBDClass = new Subscriber_call_measure_OBD();

		int exitCode = Subscriber_call_measure_OBDClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Subscriber_call_measure_OBD.class
					.getClassLoader().getResourceAsStream(
							"final_etl/subscriber_call_measure_obd_0_2/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.motech_login = (String) context.getProperty("motech_login");
			context.motech_database = (String) context
					.getProperty("motech_database");
			context.motech_port = (String) context.getProperty("motech_port");
			String pwd_motech_password_value = context
					.getProperty("motech_password");
			context.motech_password = null;
			if (pwd_motech_password_value != null) {
				if (context_param.containsKey("motech_password")) {// no need to
																	// decrypt
																	// if it
																	// come from
																	// program
																	// argument
																	// or parent
																	// job
																	// runtime
					context.motech_password = pwd_motech_password_value;
				} else if (!pwd_motech_password_value.isEmpty()) {
					try {
						context.motech_password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_motech_password_value);
						context.put("motech_password", context.motech_password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.motech_additionalParams = (String) context
					.getProperty("motech_additionalParams");
			context.motech_server = (String) context
					.getProperty("motech_server");
			context.report_port = (String) context.getProperty("report_port");
			context.report_server = (String) context
					.getProperty("report_server");
			context.report_database = (String) context
					.getProperty("report_database");
			context.report_login = (String) context.getProperty("report_login");
			String pwd_report_password_value = context
					.getProperty("report_password");
			context.report_password = null;
			if (pwd_report_password_value != null) {
				if (context_param.containsKey("report_password")) {// no need to
																	// decrypt
																	// if it
																	// come from
																	// program
																	// argument
																	// or parent
																	// job
																	// runtime
					context.report_password = pwd_report_password_value;
				} else if (!pwd_report_password_value.isEmpty()) {
					try {
						context.report_password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_report_password_value);
						context.put("report_password", context.report_password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.report_AdditionalParams = (String) context
					.getProperty("report_AdditionalParams");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("motech_login")) {
				context.motech_login = (String) parentContextMap
						.get("motech_login");
			}
			if (parentContextMap.containsKey("motech_database")) {
				context.motech_database = (String) parentContextMap
						.get("motech_database");
			}
			if (parentContextMap.containsKey("motech_port")) {
				context.motech_port = (String) parentContextMap
						.get("motech_port");
			}
			if (parentContextMap.containsKey("motech_password")) {
				context.motech_password = (java.lang.String) parentContextMap
						.get("motech_password");
			}
			if (parentContextMap.containsKey("motech_additionalParams")) {
				context.motech_additionalParams = (String) parentContextMap
						.get("motech_additionalParams");
			}
			if (parentContextMap.containsKey("motech_server")) {
				context.motech_server = (String) parentContextMap
						.get("motech_server");
			}
			if (parentContextMap.containsKey("report_port")) {
				context.report_port = (String) parentContextMap
						.get("report_port");
			}
			if (parentContextMap.containsKey("report_server")) {
				context.report_server = (String) parentContextMap
						.get("report_server");
			}
			if (parentContextMap.containsKey("report_database")) {
				context.report_database = (String) parentContextMap
						.get("report_database");
			}
			if (parentContextMap.containsKey("report_login")) {
				context.report_login = (String) parentContextMap
						.get("report_login");
			}
			if (parentContextMap.containsKey("report_password")) {
				context.report_password = (java.lang.String) parentContextMap
						.get("report_password");
			}
			if (parentContextMap.containsKey("report_AdditionalParams")) {
				context.report_AdditionalParams = (String) parentContextMap
						.get("report_AdditionalParams");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("motech_password");
		parametersToEncrypt.add("report_password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Subscriber_call_measure_OBD");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 164759 characters generated by Talend Open Studio for Big Data on the May 17,
 * 2016 4:00:48 PM PDT
 ************************************************************************************************/

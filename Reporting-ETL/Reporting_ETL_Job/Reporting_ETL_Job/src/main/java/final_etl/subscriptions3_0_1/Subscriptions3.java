// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package final_etl.subscriptions3_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.ReportingHelper;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Subscriptions3 Purpose: subscriptions2<br>
 * Description: subscriptions2 <br>
 * @author user@talend.com
 * @version 6.1.1.20151214_1327
 * @status DEV
 */
public class Subscriptions3 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (motech_login != null) {

				this.setProperty("motech_login", motech_login.toString());

			}

			if (motech_database != null) {

				this.setProperty("motech_database", motech_database.toString());

			}

			if (motech_port != null) {

				this.setProperty("motech_port", motech_port.toString());

			}

			if (motech_password != null) {

				this.setProperty("motech_password", motech_password.toString());

			}

			if (motech_additionalParams != null) {

				this.setProperty("motech_additionalParams",
						motech_additionalParams.toString());

			}

			if (motech_server != null) {

				this.setProperty("motech_server", motech_server.toString());

			}

			if (report_port != null) {

				this.setProperty("report_port", report_port.toString());

			}

			if (report_server != null) {

				this.setProperty("report_server", report_server.toString());

			}

			if (report_database != null) {

				this.setProperty("report_database", report_database.toString());

			}

			if (report_login != null) {

				this.setProperty("report_login", report_login.toString());

			}

			if (report_password != null) {

				this.setProperty("report_password", report_password.toString());

			}

			if (report_AdditionalParams != null) {

				this.setProperty("report_AdditionalParams",
						report_AdditionalParams.toString());

			}

		}

		public String motech_login;

		public String getMotech_login() {
			return this.motech_login;
		}

		public String motech_database;

		public String getMotech_database() {
			return this.motech_database;
		}

		public String motech_port;

		public String getMotech_port() {
			return this.motech_port;
		}

		public java.lang.String motech_password;

		public java.lang.String getMotech_password() {
			return this.motech_password;
		}

		public String motech_additionalParams;

		public String getMotech_additionalParams() {
			return this.motech_additionalParams;
		}

		public String motech_server;

		public String getMotech_server() {
			return this.motech_server;
		}

		public String report_port;

		public String getReport_port() {
			return this.report_port;
		}

		public String report_server;

		public String getReport_server() {
			return this.report_server;
		}

		public String report_database;

		public String getReport_database() {
			return this.report_database;
		}

		public String report_login;

		public String getReport_login() {
			return this.report_login;
		}

		public java.lang.String report_password;

		public java.lang.String getReport_password() {
			return this.report_password;
		}

		public String report_AdditionalParams;

		public String getReport_AdditionalParams() {
			return this.report_AdditionalParams;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Subscriptions3";
	private final String projectName = "FINAL_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Subscriptions3.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Subscriptions3.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMysqlInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "../db_connection.txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"../db_connection.txt", "ISO-8859-15", ";",
								"\n", true, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row9 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row9 = new row9Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row9.key = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row9.value = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							// ////////////////////////
							String tmp_key_tContextLoad_1 = null;
							String key_tContextLoad_1 = null;
							if (row9.key != null) {
								tmp_key_tContextLoad_1 = row9.key.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
										.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row9.key = tmp_key_tContextLoad_1;
								}
							}
							if (row9.key != null) {
								key_tContextLoad_1 = row9.key;
							}
							String value_tContextLoad_1 = null;
							if (row9.value != null) {
								value_tContextLoad_1 = row9.value;
							}

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null
											&& "motech_login"
													.equals(key_tContextLoad_1)) {
										context.motech_login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_database"
													.equals(key_tContextLoad_1)) {
										context.motech_database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_port"
													.equals(key_tContextLoad_1)) {
										context.motech_port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_password"
													.equals(key_tContextLoad_1)) {
										context.motech_password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_additionalParams"
													.equals(key_tContextLoad_1)) {
										context.motech_additionalParams = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "motech_server"
													.equals(key_tContextLoad_1)) {
										context.motech_server = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_port"
													.equals(key_tContextLoad_1)) {
										context.report_port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_server"
													.equals(key_tContextLoad_1)) {
										context.report_server = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_database"
													.equals(key_tContextLoad_1)) {
										context.report_database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_login"
													.equals(key_tContextLoad_1)) {
										context.report_login = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_password"
													.equals(key_tContextLoad_1)) {
										context.report_password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "report_AdditionalParams"
													.equals(key_tContextLoad_1)) {
										context.report_AdditionalParams = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1
												.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1
												.add(key_tContextLoad_1);
									}
									if (value_tContextLoad_1 == null) {
										context.setProperty(key_tContextLoad_1,
												"");
									} else {
										context.setProperty(key_tContextLoad_1,
												value_tContextLoad_1);
									}
								} catch (java.lang.Exception e) {
									System.err
											.println("Setting a value for the key \""
													+ key_tContextLoad_1
													+ "\" has failed. Error message: "
													+ e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							// ////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("../db_connection.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				parametersToEncrypt_tContextLoad_1.add("motech_password");

				parametersToEncrypt_tContextLoad_1.add("report_password");

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_3Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];

		public String lastEtlTime;

		public String getLastEtlTime() {
			return this.lastEtlTime;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.lastEtlTime = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lastEtlTime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lastEtlTime=" + lastEtlTime);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_3 begin ] start
				 */

				ok_Hash.put("tMysqlInput_3", false);
				start_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				currentComponent = "tMysqlInput_3";

				int tos_count_tMysqlInput_3 = 0;

				java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
						.getTime();
				int nb_line_tMysqlInput_3 = 0;
				java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_3);
				String dbUser_tMysqlInput_3 = context.report_login;

				final String decryptedPassword_tMysqlInput_3 = context.report_password;

				String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;

				String url_tMysqlInput_3 = "jdbc:mysql://"
						+ context.report_server + ":" + context.report_port
						+ "/" + context.report_database + "?"
						+ context.report_AdditionalParams;

				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_3, dbUser_tMysqlInput_3,
						dbPwd_tMysqlInput_3);

				java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
						.createStatement();

				String dbquery_tMysqlInput_3 = "SELECT last_etl_time FROM ETL_info_table\nWHERE table_id=14";

				globalMap.put("tMysqlInput_3_QUERY", dbquery_tMysqlInput_3);

				java.sql.ResultSet rs_tMysqlInput_3 = null;
				try {
					rs_tMysqlInput_3 = stmt_tMysqlInput_3
							.executeQuery(dbquery_tMysqlInput_3);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
							.getMetaData();
					int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3
							.getColumnCount();

					String tmpContent_tMysqlInput_3 = null;

					while (rs_tMysqlInput_3.next()) {
						nb_line_tMysqlInput_3++;

						if (colQtyInRs_tMysqlInput_3 < 1) {
							row6.lastEtlTime = null;
						} else {

							row6.lastEtlTime = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_3, 1, false);
						}

						/**
						 * [tMysqlInput_3 begin ] stop
						 */

						/**
						 * [tMysqlInput_3 main ] start
						 */

						currentComponent = "tMysqlInput_3";

						tos_count_tMysqlInput_3++;

						/**
						 * [tMysqlInput_3 main ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// Code generated according to input schema and output
						// schema

						globalMap.put("lastEtlTime",
								row6.lastEtlTime != null ? row6.lastEtlTime
										: "");
						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tMysqlInput_3 end ] start
						 */

						currentComponent = "tMysqlInput_3";

					}
				} finally {
					if (rs_tMysqlInput_3 != null) {
						rs_tMysqlInput_3.close();
					}
					stmt_tMysqlInput_3.close();
					if (conn_tMysqlInput_3 != null
							&& !conn_tMysqlInput_3.isClosed()) {

						conn_tMysqlInput_3.close();

					}

				}

				globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

				ok_Hash.put("tMysqlInput_3", true);
				end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				/**
				 * [tMysqlInput_3 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_3 finally ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class copyOfinsert_subscription_status_measureStruct
			implements
			routines.system.IPersistableRow<copyOfinsert_subscription_status_measureStruct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public int Date_ID;

		public int getDate_ID() {
			return this.Date_ID;
		}

		public int Time_ID;

		public int getTime_ID() {
			return this.Time_ID;
		}

		public long Operator_ID;

		public long getOperator_ID() {
			return this.Operator_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				result = prime * result + (int) this.Date_ID;

				result = prime * result + (int) this.Time_ID;

				result = prime * result + (int) this.Operator_ID;

				result = prime * result
						+ ((this.Status == null) ? 0 : this.Status.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfinsert_subscription_status_measureStruct other = (copyOfinsert_subscription_status_measureStruct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			if (this.Date_ID != other.Date_ID)
				return false;

			if (this.Time_ID != other.Time_ID)
				return false;

			if (this.Operator_ID != other.Operator_ID)
				return false;

			if (this.Status == null) {
				if (other.Status != null)
					return false;

			} else if (!this.Status.equals(other.Status))

				return false;

			return true;
		}

		public void copyDataTo(
				copyOfinsert_subscription_status_measureStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Date_ID = this.Date_ID;
			other.Time_ID = this.Time_ID;
			other.Operator_ID = this.Operator_ID;
			other.Status = this.Status;
			other.Last_Modified_Time = this.Last_Modified_Time;

		}

		public void copyKeysDataTo(
				copyOfinsert_subscription_status_measureStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Date_ID = this.Date_ID;
			other.Time_ID = this.Time_ID;
			other.Operator_ID = this.Operator_ID;
			other.Status = this.Status;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Date_ID = dis.readInt();

					this.Time_ID = dis.readInt();

					this.Operator_ID = dis.readLong();

					this.Status = readString(dis);

					this.Last_Modified_Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// int

				dos.writeInt(this.Date_ID);

				// int

				dos.writeInt(this.Time_ID);

				// long

				dos.writeLong(this.Operator_ID);

				// String

				writeString(this.Status, dos);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Date_ID=" + String.valueOf(Date_ID));
			sb.append(",Time_ID=" + String.valueOf(Time_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Status=" + Status);
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(
				copyOfinsert_subscription_status_measureStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date_ID, other.Date_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Time_ID, other.Time_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Operator_ID,
					other.Operator_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Status, other.Status);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Subscriber_ID;

		public long getSubscriber_ID() {
			return this.Subscriber_ID;
		}

		public Long Subscriber_Pack_ID;

		public Long getSubscriber_Pack_ID() {
			return this.Subscriber_Pack_ID;
		}

		public long Channel_ID;

		public long getChannel_ID() {
			return this.Channel_ID;
		}

		public int Operator_ID;

		public int getOperator_ID() {
			return this.Operator_ID;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public Long Old_Subscription_ID;

		public Long getOld_Subscription_ID() {
			return this.Old_Subscription_ID;
		}

		public long MS_ISDN;

		public long getMS_ISDN() {
			return this.MS_ISDN;
		}

		public String SubscriptionId;

		public String getSubscriptionId() {
			return this.SubscriptionId;
		}

		public java.util.Date Activation_Date;

		public java.util.Date getActivation_Date() {
			return this.Activation_Date;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Subscriber_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.Subscriber_Pack_ID = null;
					} else {
						this.Subscriber_Pack_ID = dis.readLong();
					}

					this.Channel_ID = dis.readLong();

					this.Operator_ID = dis.readInt();

					this.Last_Modified_Time = readDate(dis);

					this.Subscription_Status = readString(dis);

					this.Start_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Old_Subscription_ID = null;
					} else {
						this.Old_Subscription_ID = dis.readLong();
					}

					this.MS_ISDN = dis.readLong();

					this.SubscriptionId = readString(dis);

					this.Activation_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Subscriber_ID);

				// Long

				if (this.Subscriber_Pack_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Subscriber_Pack_ID);
				}

				// long

				dos.writeLong(this.Channel_ID);

				// int

				dos.writeInt(this.Operator_ID);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// Long

				if (this.Old_Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Old_Subscription_ID);
				}

				// long

				dos.writeLong(this.MS_ISDN);

				// String

				writeString(this.SubscriptionId, dos);

				// java.util.Date

				writeDate(this.Activation_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Subscriber_ID=" + String.valueOf(Subscriber_ID));
			sb.append(",Subscriber_Pack_ID="
					+ String.valueOf(Subscriber_Pack_ID));
			sb.append(",Channel_ID=" + String.valueOf(Channel_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",Old_Subscription_ID="
					+ String.valueOf(Old_Subscription_ID));
			sb.append(",MS_ISDN=" + String.valueOf(MS_ISDN));
			sb.append(",SubscriptionId=" + SubscriptionId);
			sb.append(",Activation_Date=" + String.valueOf(Activation_Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Subscriber_ID;

		public long getSubscriber_ID() {
			return this.Subscriber_ID;
		}

		public Long Subscriber_Pack_ID;

		public Long getSubscriber_Pack_ID() {
			return this.Subscriber_Pack_ID;
		}

		public long Channel_ID;

		public long getChannel_ID() {
			return this.Channel_ID;
		}

		public int Operator_ID;

		public int getOperator_ID() {
			return this.Operator_ID;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public Long Old_Subscription_ID;

		public Long getOld_Subscription_ID() {
			return this.Old_Subscription_ID;
		}

		public long MS_ISDN;

		public long getMS_ISDN() {
			return this.MS_ISDN;
		}

		public String SubscriptionId;

		public String getSubscriptionId() {
			return this.SubscriptionId;
		}

		public java.util.Date Activation_Date;

		public java.util.Date getActivation_Date() {
			return this.Activation_Date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Subscriber_ID = this.Subscriber_ID;
			other.Subscriber_Pack_ID = this.Subscriber_Pack_ID;
			other.Channel_ID = this.Channel_ID;
			other.Operator_ID = this.Operator_ID;
			other.Last_Modified_Time = this.Last_Modified_Time;
			other.Subscription_Status = this.Subscription_Status;
			other.Start_Date = this.Start_Date;
			other.Old_Subscription_ID = this.Old_Subscription_ID;
			other.MS_ISDN = this.MS_ISDN;
			other.SubscriptionId = this.SubscriptionId;
			other.Activation_Date = this.Activation_Date;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.Subscription_ID = this.Subscription_ID;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Subscriber_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.Subscriber_Pack_ID = null;
					} else {
						this.Subscriber_Pack_ID = dis.readLong();
					}

					this.Channel_ID = dis.readLong();

					this.Operator_ID = dis.readInt();

					this.Last_Modified_Time = readDate(dis);

					this.Subscription_Status = readString(dis);

					this.Start_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Old_Subscription_ID = null;
					} else {
						this.Old_Subscription_ID = dis.readLong();
					}

					this.MS_ISDN = dis.readLong();

					this.SubscriptionId = readString(dis);

					this.Activation_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Subscriber_ID);

				// Long

				if (this.Subscriber_Pack_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Subscriber_Pack_ID);
				}

				// long

				dos.writeLong(this.Channel_ID);

				// int

				dos.writeInt(this.Operator_ID);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// Long

				if (this.Old_Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Old_Subscription_ID);
				}

				// long

				dos.writeLong(this.MS_ISDN);

				// String

				writeString(this.SubscriptionId, dos);

				// java.util.Date

				writeDate(this.Activation_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Subscriber_ID=" + String.valueOf(Subscriber_ID));
			sb.append(",Subscriber_Pack_ID="
					+ String.valueOf(Subscriber_Pack_ID));
			sb.append(",Channel_ID=" + String.valueOf(Channel_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",Old_Subscription_ID="
					+ String.valueOf(Old_Subscription_ID));
			sb.append(",MS_ISDN=" + String.valueOf(MS_ISDN));
			sb.append(",SubscriptionId=" + SubscriptionId);
			sb.append(",Activation_Date=" + String.valueOf(Activation_Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class subscription_new_dataStruct implements
			routines.system.IPersistableRow<subscription_new_dataStruct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Subscriber_ID;

		public long getSubscriber_ID() {
			return this.Subscriber_ID;
		}

		public Long Subscriber_Pack_ID;

		public Long getSubscriber_Pack_ID() {
			return this.Subscriber_Pack_ID;
		}

		public long Channel_ID;

		public long getChannel_ID() {
			return this.Channel_ID;
		}

		public int Operator_ID;

		public int getOperator_ID() {
			return this.Operator_ID;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public Long Old_Subscription_ID;

		public Long getOld_Subscription_ID() {
			return this.Old_Subscription_ID;
		}

		public long MS_ISDN;

		public long getMS_ISDN() {
			return this.MS_ISDN;
		}

		public String SubscriptionId;

		public String getSubscriptionId() {
			return this.SubscriptionId;
		}

		public java.util.Date Activation_Date;

		public java.util.Date getActivation_Date() {
			return this.Activation_Date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final subscription_new_dataStruct other = (subscription_new_dataStruct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			return true;
		}

		public void copyDataTo(subscription_new_dataStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Subscriber_ID = this.Subscriber_ID;
			other.Subscriber_Pack_ID = this.Subscriber_Pack_ID;
			other.Channel_ID = this.Channel_ID;
			other.Operator_ID = this.Operator_ID;
			other.Last_Modified_Time = this.Last_Modified_Time;
			other.Subscription_Status = this.Subscription_Status;
			other.Start_Date = this.Start_Date;
			other.Old_Subscription_ID = this.Old_Subscription_ID;
			other.MS_ISDN = this.MS_ISDN;
			other.SubscriptionId = this.SubscriptionId;
			other.Activation_Date = this.Activation_Date;

		}

		public void copyKeysDataTo(subscription_new_dataStruct other) {

			other.Subscription_ID = this.Subscription_ID;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Subscriber_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.Subscriber_Pack_ID = null;
					} else {
						this.Subscriber_Pack_ID = dis.readLong();
					}

					this.Channel_ID = dis.readLong();

					this.Operator_ID = dis.readInt();

					this.Last_Modified_Time = readDate(dis);

					this.Subscription_Status = readString(dis);

					this.Start_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Old_Subscription_ID = null;
					} else {
						this.Old_Subscription_ID = dis.readLong();
					}

					this.MS_ISDN = dis.readLong();

					this.SubscriptionId = readString(dis);

					this.Activation_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Subscriber_ID);

				// Long

				if (this.Subscriber_Pack_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Subscriber_Pack_ID);
				}

				// long

				dos.writeLong(this.Channel_ID);

				// int

				dos.writeInt(this.Operator_ID);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// Long

				if (this.Old_Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Old_Subscription_ID);
				}

				// long

				dos.writeLong(this.MS_ISDN);

				// String

				writeString(this.SubscriptionId, dos);

				// java.util.Date

				writeDate(this.Activation_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Subscriber_ID=" + String.valueOf(Subscriber_ID));
			sb.append(",Subscriber_Pack_ID="
					+ String.valueOf(Subscriber_Pack_ID));
			sb.append(",Channel_ID=" + String.valueOf(Channel_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",Old_Subscription_ID="
					+ String.valueOf(Old_Subscription_ID));
			sb.append(",MS_ISDN=" + String.valueOf(MS_ISDN));
			sb.append(",SubscriptionId=" + SubscriptionId);
			sb.append(",Activation_Date=" + String.valueOf(Activation_Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(subscription_new_dataStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];

		public long ID;

		public long getID() {
			return this.ID;
		}

		public long Subscriber_ID;

		public long getSubscriber_ID() {
			return this.Subscriber_ID;
		}

		public long Subscriber_Pack_ID;

		public long getSubscriber_Pack_ID() {
			return this.Subscriber_Pack_ID;
		}

		public String Origin;

		public String getOrigin() {
			return this.Origin;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public long MSISDN;

		public long getMSISDN() {
			return this.MSISDN;
		}

		public String Pack_Name;

		public String getPack_Name() {
			return this.Pack_Name;
		}

		public String subscriptionId;

		public String getSubscriptionId() {
			return this.subscriptionId;
		}

		public Long Old_Subscription_ID;

		public Long getOld_Subscription_ID() {
			return this.Old_Subscription_ID;
		}

		public java.util.Date modificationDate;

		public java.util.Date getModificationDate() {
			return this.modificationDate;
		}

		public java.util.Date activationDate;

		public java.util.Date getActivationDate() {
			return this.activationDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.ID = dis.readLong();

					this.Subscriber_ID = dis.readLong();

					this.Subscriber_Pack_ID = dis.readLong();

					this.Origin = readString(dis);

					this.Subscription_Status = readString(dis);

					this.Start_Date = readDate(dis);

					this.MSISDN = dis.readLong();

					this.Pack_Name = readString(dis);

					this.subscriptionId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Old_Subscription_ID = null;
					} else {
						this.Old_Subscription_ID = dis.readLong();
					}

					this.modificationDate = readDate(dis);

					this.activationDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.ID);

				// long

				dos.writeLong(this.Subscriber_ID);

				// long

				dos.writeLong(this.Subscriber_Pack_ID);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// long

				dos.writeLong(this.MSISDN);

				// String

				writeString(this.Pack_Name, dos);

				// String

				writeString(this.subscriptionId, dos);

				// Long

				if (this.Old_Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Old_Subscription_ID);
				}

				// java.util.Date

				writeDate(this.modificationDate, dos);

				// java.util.Date

				writeDate(this.activationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Subscriber_ID=" + String.valueOf(Subscriber_ID));
			sb.append(",Subscriber_Pack_ID="
					+ String.valueOf(Subscriber_Pack_ID));
			sb.append(",Origin=" + Origin);
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",MSISDN=" + String.valueOf(MSISDN));
			sb.append(",Pack_Name=" + Pack_Name);
			sb.append(",subscriptionId=" + subscriptionId);
			sb.append(",Old_Subscription_ID="
					+ String.valueOf(Old_Subscription_ID));
			sb.append(",modificationDate=" + String.valueOf(modificationDate));
			sb.append(",activationDate=" + String.valueOf(activationDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				subscription_new_dataStruct subscription_new_data = new subscription_new_dataStruct();
				row5Struct row5 = new row5Struct();
				row8Struct row8 = new row8Struct();
				copyOfinsert_subscription_status_measureStruct copyOfinsert_subscription_status_measure = new copyOfinsert_subscription_status_measureStruct();

				/**
				 * [tMysqlOutput_5 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_5", false);
				start_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_5";

				int tos_count_tMysqlOutput_5 = 0;

				int nb_line_tMysqlOutput_5 = 0;
				int nb_line_update_tMysqlOutput_5 = 0;
				int nb_line_inserted_tMysqlOutput_5 = 0;
				int nb_line_deleted_tMysqlOutput_5 = 0;
				int nb_line_rejected_tMysqlOutput_5 = 0;

				int deletedCount_tMysqlOutput_5 = 0;
				int updatedCount_tMysqlOutput_5 = 0;
				int insertedCount_tMysqlOutput_5 = 0;

				int rejectedCount_tMysqlOutput_5 = 0;

				String tableName_tMysqlOutput_5 = "subscription_status_measure";
				boolean whetherReject_tMysqlOutput_5 = false;

				java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime()
						.getTime();
				calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5
						.getTime().getTime();
				long date_tMysqlOutput_5;

				java.sql.Connection conn_tMysqlOutput_5 = null;
				String dbProperties_tMysqlOutput_5 = context.report_AdditionalParams;
				String url_tMysqlOutput_5 = null;
				if (dbProperties_tMysqlOutput_5 == null
						|| dbProperties_tMysqlOutput_5.trim().length() == 0) {
					url_tMysqlOutput_5 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_5 = context.report_AdditionalParams;
					if (!properties_tMysqlOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_5 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ properties_tMysqlOutput_5;
				}
				String driverClass_tMysqlOutput_5 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_5 = context.report_login;

				final String decryptedPassword_tMysqlOutput_5 = context.report_password;

				String dbPwd_tMysqlOutput_5 = decryptedPassword_tMysqlOutput_5;
				java.lang.Class.forName(driverClass_tMysqlOutput_5);

				conn_tMysqlOutput_5 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_5, dbUser_tMysqlOutput_5,
						dbPwd_tMysqlOutput_5);

				resourceMap.put("conn_tMysqlOutput_5", conn_tMysqlOutput_5);
				conn_tMysqlOutput_5.setAutoCommit(false);
				int commitEvery_tMysqlOutput_5 = 10000;
				int commitCounter_tMysqlOutput_5 = 0;

				int count_tMysqlOutput_5 = 0;

				String insert_tMysqlOutput_5 = "INSERT INTO `"
						+ "subscription_status_measure"
						+ "` (`Subscription_ID`,`Date_ID`,`Time_ID`,`Operator_ID`,`Status`,`Last_Modified_Time`) VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tMysqlOutput_5 = conn_tMysqlOutput_5
						.prepareStatement(insert_tMysqlOutput_5);

				/**
				 * [tMysqlOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
					Long weekNumber;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfinsert_subscription_status_measureStruct copyOfinsert_subscription_status_measure_tmp = new copyOfinsert_subscription_status_measureStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int updateKeyCount_tMysqlOutput_1 = 1;
				if (updateKeyCount_tMysqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "subscriptions";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = context.report_AdditionalParams;
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = context.report_AdditionalParams;
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ properties_tMysqlOutput_1;
				}
				String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_1 = context.report_login;

				final String decryptedPassword_tMysqlOutput_1 = context.report_password;

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
				java.lang.Class.forName(driverClass_tMysqlOutput_1);

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String update_tMysqlOutput_1 = "UPDATE `"
						+ "subscriptions"
						+ "` SET `Subscriber_ID` = ?,`Subscriber_Pack_ID` = ?,`Channel_ID` = ?,`Operator_ID` = ?,`Last_Modified_Time` = ?,`Subscription_Status` = ?,`Start_Date` = ?,`Old_Subscription_ID` = ?,`MS_ISDN` = ?,`SubscriptionId` = ?,`Activation_Date` = ? WHERE `Subscription_ID` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(update_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				subscription_new_dataStruct subscription_new_data_tmp = new subscription_new_dataStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_1);
				String dbUser_tMysqlInput_1 = context.motech_login;

				final String decryptedPassword_tMysqlInput_1 = context.motech_password;

				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://"
						+ context.motech_server + ":" + context.motech_port
						+ "/" + context.motech_database + "?"
						+ context.motech_additionalParams;

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT subs.id as 'ID', subs.subscriber_id_OID as 'Subscriber_ID', \nsubs.subscriptionPack_id_OID as 'Subscriber_Pack_ID', \nsubs.origin as 'Origin',\nCASE WHEN subs.status='DEACTIVATED' AND subs.deactivationReason='DEACTIVATED_BY_USER' THEN 'DEACTIVATED_BY_USER'\nELSE subs.status END AS 'Subscription_Status',\nsubs.startDate as 'Start_Date',\nsbr.callingNumber as 'MSISDN', sp.name as 'Pack_Name', subs.subscriptionId,\nold_subs.Old_Subscription_ID,\nsubs.modificationDate,\nsubs.activationDate \nFROM nms_subscriptions subs\nINNER JOIN nms_subscription_packs sp\nON sp.id = subs.subscriptionPack_id_OID\nINNER JOIN nms_subscribers sbr\nON sbr.id = subs.subscriber_id_OID\nLEFT OUTER JOIN (\nSELECT MAX(subs2.id) as 'Old_Subscription_ID',subs2.subscriber_id_OID as'User_id' \nFROM nms_subscriptions subs2 \nWhere subs2.status = 'DEACTIVATED'\nGROUP BY subs2.subscriber_id_OID   \n) old_subs ON (old_subs.User_id = subs.subscriber_id_OID and subs.status ='ACTIVE')\nWHERE subs.creationDate<='"
						+ (String) globalMap.get("lastEtlTime")
						+ "'\nAND subs.modificationDate >'"
						+ (String) globalMap.get("lastEtlTime") + "'";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);

				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.ID = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row1.ID = rs_tMysqlInput_1.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.Subscriber_ID = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(2) != null) {
								row1.Subscriber_ID = rs_tMysqlInput_1
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.Subscriber_Pack_ID = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(3) != null) {
								row1.Subscriber_Pack_ID = rs_tMysqlInput_1
										.getLong(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.Origin = null;
						} else {

							row1.Origin = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_1, 4, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.Subscription_Status = null;
						} else {

							row1.Subscription_Status = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 5, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 6) {
							row1.Start_Date = null;
						} else {

							if (rs_tMysqlInput_1.getString(6) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(6);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.Start_Date = rs_tMysqlInput_1
											.getTimestamp(6);
								} else {
									row1.Start_Date = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.Start_Date = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 7) {
							row1.MSISDN = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(7) != null) {
								row1.MSISDN = rs_tMysqlInput_1.getLong(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 8) {
							row1.Pack_Name = null;
						} else {

							row1.Pack_Name = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 8, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 9) {
							row1.subscriptionId = null;
						} else {

							row1.subscriptionId = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_1, 9, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 10) {
							row1.Old_Subscription_ID = null;
						} else {

							if (rs_tMysqlInput_1.getObject(10) != null) {
								row1.Old_Subscription_ID = rs_tMysqlInput_1
										.getLong(10);
							} else {
								row1.Old_Subscription_ID = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 11) {
							row1.modificationDate = null;
						} else {

							if (rs_tMysqlInput_1.getString(11) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(11);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.modificationDate = rs_tMysqlInput_1
											.getTimestamp(11);
								} else {
									row1.modificationDate = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.modificationDate = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 12) {
							row1.activationDate = null;
						} else {

							if (rs_tMysqlInput_1.getString(12) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(12);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.activationDate = rs_tMysqlInput_1
											.getTimestamp(12);
								} else {
									row1.activationDate = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.activationDate = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							subscription_new_data = null;

							// # Output table : 'subscription_new_data'
							subscription_new_data_tmp.Subscription_ID = row1.ID;
							subscription_new_data_tmp.Subscriber_ID = row1.Subscriber_ID;
							subscription_new_data_tmp.Subscriber_Pack_ID = row1.Subscriber_Pack_ID;
							subscription_new_data_tmp.Channel_ID = ReportingHelper
									.getChannelId(row1.Origin,
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_1"));
							subscription_new_data_tmp.Operator_ID = 0;
							subscription_new_data_tmp.Last_Modified_Time = row1.modificationDate;
							subscription_new_data_tmp.Subscription_Status = row1.Subscription_Status;
							subscription_new_data_tmp.Start_Date = row1.Start_Date;
							subscription_new_data_tmp.Old_Subscription_ID = row1.Old_Subscription_ID;
							subscription_new_data_tmp.MS_ISDN = row1.MSISDN;
							subscription_new_data_tmp.SubscriptionId = row1.subscriptionId;
							subscription_new_data_tmp.Activation_Date = row1.activationDate;
							subscription_new_data = subscription_new_data_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "subscription_new_data"
						if (subscription_new_data != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							row5 = null;
							whetherReject_tMysqlOutput_1 = false;
							pstmt_tMysqlOutput_1.setLong(1,
									subscription_new_data.Subscriber_ID);

							if (subscription_new_data.Subscriber_Pack_ID == null) {
								pstmt_tMysqlOutput_1.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setLong(
												2,
												subscription_new_data.Subscriber_Pack_ID);
							}

							pstmt_tMysqlOutput_1.setLong(3,
									subscription_new_data.Channel_ID);

							pstmt_tMysqlOutput_1.setInt(4,
									subscription_new_data.Operator_ID);

							if (subscription_new_data.Last_Modified_Time != null) {
								date_tMysqlOutput_1 = subscription_new_data.Last_Modified_Time
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(5,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(5,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(5,
										java.sql.Types.DATE);
							}

							if (subscription_new_data.Subscription_Status == null) {
								pstmt_tMysqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1
										.setString(
												6,
												subscription_new_data.Subscription_Status);
							}

							if (subscription_new_data.Start_Date != null) {
								date_tMysqlOutput_1 = subscription_new_data.Start_Date
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(7,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(7,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(7,
										java.sql.Types.DATE);
							}

							if (subscription_new_data.Old_Subscription_ID == null) {
								pstmt_tMysqlOutput_1.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1
										.setLong(
												8,
												subscription_new_data.Old_Subscription_ID);
							}

							pstmt_tMysqlOutput_1.setLong(9,
									subscription_new_data.MS_ISDN);

							if (subscription_new_data.SubscriptionId == null) {
								pstmt_tMysqlOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(10,
										subscription_new_data.SubscriptionId);
							}

							if (subscription_new_data.Activation_Date != null) {
								date_tMysqlOutput_1 = subscription_new_data.Activation_Date
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(11,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(11,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(11,
										java.sql.Types.DATE);
							}

							pstmt_tMysqlOutput_1.setLong(
									12 + count_tMysqlOutput_1,
									subscription_new_data.Subscription_ID);

							try {
								nb_line_tMysqlOutput_1++;
								updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
										+ pstmt_tMysqlOutput_1.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_1 = true;
								System.err.print(e.getMessage());
							}
							if (!whetherReject_tMysqlOutput_1) {
								row5 = new row5Struct();
								row5.Subscription_ID = subscription_new_data.Subscription_ID;
								row5.Subscriber_ID = subscription_new_data.Subscriber_ID;
								row5.Subscriber_Pack_ID = subscription_new_data.Subscriber_Pack_ID;
								row5.Channel_ID = subscription_new_data.Channel_ID;
								row5.Operator_ID = subscription_new_data.Operator_ID;
								row5.Last_Modified_Time = subscription_new_data.Last_Modified_Time;
								row5.Subscription_Status = subscription_new_data.Subscription_Status;
								row5.Start_Date = subscription_new_data.Start_Date;
								row5.Old_Subscription_ID = subscription_new_data.Old_Subscription_ID;
								row5.MS_ISDN = subscription_new_data.MS_ISDN;
								row5.SubscriptionId = subscription_new_data.SubscriptionId;
								row5.Activation_Date = subscription_new_data.Activation_Date;
							}
							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								conn_tMysqlOutput_1.commit();
								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								row8 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
										"||");
								ope_tFilterRow_1
										.matches(
												(row5.Subscription_Status == null ? false
														: row5.Subscription_Status
																.compareTo("DEACTIVATED") == 0),
												"Subscription_Status.compareTo(\"DEACTIVATED\") == 0 failed");
								ope_tFilterRow_1
										.matches(
												(row5.Subscription_Status == null ? false
														: row5.Subscription_Status
																.compareTo("COMPLETED") == 0),
												"Subscription_Status.compareTo(\"COMPLETED\") == 0 failed");
								ope_tFilterRow_1
										.matches(
												(row5.Subscription_Status == null ? false
														: row5.Subscription_Status
																.compareTo("DEACTIVATED_BY_USER") == 0),
												"Subscription_Status.compareTo(\"DEACTIVATED_BY_USER\") == 0 failed");
								ope_tFilterRow_1
										.matches(
												(row5.Subscription_Status == null ? false
														: row5.Subscription_Status
																.compareTo("ACTIVE") == 0),
												"Subscription_Status.compareTo(\"ACTIVE\") == 0 failed");
								ope_tFilterRow_1
										.matches(
												(row5.Subscription_Status == null ? false
														: row5.Subscription_Status
																.compareTo("PENDING_ACTIVATION") == 0),
												"Subscription_Status.compareTo(\"PENDING_ACTIVATION\") == 0 failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row8 == null) {
										row8 = new row8Struct();
									}
									row8.Subscription_ID = row5.Subscription_ID;
									row8.Subscriber_ID = row5.Subscriber_ID;
									row8.Subscriber_Pack_ID = row5.Subscriber_Pack_ID;
									row8.Channel_ID = row5.Channel_ID;
									row8.Operator_ID = row5.Operator_ID;
									row8.Last_Modified_Time = row5.Last_Modified_Time;
									row8.Subscription_Status = row5.Subscription_Status;
									row8.Start_Date = row5.Start_Date;
									row8.Old_Subscription_ID = row5.Old_Subscription_ID;
									row8.MS_ISDN = row5.MS_ISDN;
									row8.SubscriptionId = row5.SubscriptionId;
									row8.Activation_Date = row5.Activation_Date;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */
								// Start of branch "row8"
								if (row8 != null) {

									/**
									 * [tMap_5 main ] start
									 */

									currentComponent = "tMap_5";

									boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_5 = false;
									boolean mainRowRejected_tMap_5 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_5__Struct Var = Var__tMap_5;
										Var.weekNumber = ReportingHelper
												.getWeekForUpdateSubsAndInsertTransitionView(
														row8.Start_Date,
														row8.Subscription_ID,
														row8.Subscription_Status,
														row8.Last_Modified_Time,
														(java.sql.Connection) resourceMap
																.get("conn_tMysqlOutput_1"));// ###############################
										// ###############################
										// # Output tables

										copyOfinsert_subscription_status_measure = null;

										// # Output table :
										// 'copyOfinsert_subscription_status_measure'
										copyOfinsert_subscription_status_measure_tmp.Subscription_ID = row8.Subscription_ID;
										copyOfinsert_subscription_status_measure_tmp.Date_ID = ReportingHelper
												.getDateId(
														row8.Last_Modified_Time,
														(java.sql.Connection) resourceMap
																.get("conn_tMysqlOutput_1"));
										copyOfinsert_subscription_status_measure_tmp.Time_ID = ReportingHelper
												.getTimeId(
														row8.Last_Modified_Time,
														(java.sql.Connection) resourceMap
																.get("conn_tMysqlOutput_1"));
										copyOfinsert_subscription_status_measure_tmp.Operator_ID = row8.Operator_ID;
										copyOfinsert_subscription_status_measure_tmp.Status = row8.Subscription_Status;
										copyOfinsert_subscription_status_measure_tmp.Last_Modified_Time = row8.Last_Modified_Time;
										copyOfinsert_subscription_status_measure = copyOfinsert_subscription_status_measure_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_5 = false;

									tos_count_tMap_5++;

									/**
									 * [tMap_5 main ] stop
									 */
									// Start of branch
									// "copyOfinsert_subscription_status_measure"
									if (copyOfinsert_subscription_status_measure != null) {

										/**
										 * [tMysqlOutput_5 main ] start
										 */

										currentComponent = "tMysqlOutput_5";

										whetherReject_tMysqlOutput_5 = false;
										pstmt_tMysqlOutput_5
												.setLong(
														1,
														copyOfinsert_subscription_status_measure.Subscription_ID);

										pstmt_tMysqlOutput_5
												.setInt(2,
														copyOfinsert_subscription_status_measure.Date_ID);

										pstmt_tMysqlOutput_5
												.setInt(3,
														copyOfinsert_subscription_status_measure.Time_ID);

										pstmt_tMysqlOutput_5
												.setLong(
														4,
														copyOfinsert_subscription_status_measure.Operator_ID);

										if (copyOfinsert_subscription_status_measure.Status == null) {
											pstmt_tMysqlOutput_5.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_5
													.setString(
															5,
															copyOfinsert_subscription_status_measure.Status);
										}

										if (copyOfinsert_subscription_status_measure.Last_Modified_Time != null) {
											date_tMysqlOutput_5 = copyOfinsert_subscription_status_measure.Last_Modified_Time
													.getTime();
											if (date_tMysqlOutput_5 < year1_tMysqlOutput_5
													|| date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
												pstmt_tMysqlOutput_5.setString(
														6,
														"0000-00-00 00:00:00");
											} else {
												pstmt_tMysqlOutput_5
														.setTimestamp(
																6,
																new java.sql.Timestamp(
																		date_tMysqlOutput_5));
											}
										} else {
											pstmt_tMysqlOutput_5.setNull(6,
													java.sql.Types.DATE);
										}

										try {
											nb_line_tMysqlOutput_5++;
											insertedCount_tMysqlOutput_5 = insertedCount_tMysqlOutput_5
													+ pstmt_tMysqlOutput_5
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_5 = true;
											System.err.print(e.getMessage());
										}
										if (!whetherReject_tMysqlOutput_5) {
										}
										commitCounter_tMysqlOutput_5++;

										if (commitEvery_tMysqlOutput_5 <= commitCounter_tMysqlOutput_5) {

											conn_tMysqlOutput_5.commit();
											commitCounter_tMysqlOutput_5 = 0;

										}

										tos_count_tMysqlOutput_5++;

										/**
										 * [tMysqlOutput_5 main ] stop
										 */

									} // End of branch
										// "copyOfinsert_subscription_status_measure"

								} // End of branch "row8"

							} // End of branch "row5"

						} // End of branch "subscription_new_data"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();
					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {

						conn_tMysqlInput_1.close();

					}

				}

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				if (commitCounter_tMysqlOutput_1 > 0) {

					conn_tMysqlOutput_1.commit();

				}

				conn_tMysqlOutput_1.close();

				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMysqlOutput_5 end ] start
				 */

				currentComponent = "tMysqlOutput_5";

				if (pstmt_tMysqlOutput_5 != null) {

					pstmt_tMysqlOutput_5.close();

				}

				if (commitCounter_tMysqlOutput_5 > 0) {

					conn_tMysqlOutput_5.commit();

				}

				conn_tMysqlOutput_5.close();

				resourceMap.put("finish_tMysqlOutput_5", true);

				nb_line_deleted_tMysqlOutput_5 = nb_line_deleted_tMysqlOutput_5
						+ deletedCount_tMysqlOutput_5;
				nb_line_update_tMysqlOutput_5 = nb_line_update_tMysqlOutput_5
						+ updatedCount_tMysqlOutput_5;
				nb_line_inserted_tMysqlOutput_5 = nb_line_inserted_tMysqlOutput_5
						+ insertedCount_tMysqlOutput_5;
				nb_line_rejected_tMysqlOutput_5 = nb_line_rejected_tMysqlOutput_5
						+ rejectedCount_tMysqlOutput_5;

				globalMap.put("tMysqlOutput_5_NB_LINE", nb_line_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_5);

				ok_Hash.put("tMysqlOutput_5", true);
				end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				tMysqlInput_2Process(globalMap);

				/**
				 * [tMysqlOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :"
									+ sqlEx_tMysqlOutput_1.getMessage();

							System.err.println(errorMessage_tMysqlOutput_1);
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tMysqlOutput_5 finally ] start
				 */

				currentComponent = "tMysqlOutput_5";

				if (resourceMap.get("finish_tMysqlOutput_5") == null) {
					if (resourceMap.get("conn_tMysqlOutput_5") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_5")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_5) {
							String errorMessage_tMysqlOutput_5 = "failed to close the connection in tMysqlOutput_5 :"
									+ sqlEx_tMysqlOutput_5.getMessage();

							System.err.println(errorMessage_tMysqlOutput_5);
						}
					}
				}

				/**
				 * [tMysqlOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class insert_subscription_status_measureStruct
			implements
			routines.system.IPersistableRow<insert_subscription_status_measureStruct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public int Date_ID;

		public int getDate_ID() {
			return this.Date_ID;
		}

		public int Time_ID;

		public int getTime_ID() {
			return this.Time_ID;
		}

		public long Operator_ID;

		public long getOperator_ID() {
			return this.Operator_ID;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				result = prime * result + (int) this.Date_ID;

				result = prime * result + (int) this.Time_ID;

				result = prime * result + (int) this.Operator_ID;

				result = prime * result
						+ ((this.Status == null) ? 0 : this.Status.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_subscription_status_measureStruct other = (insert_subscription_status_measureStruct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			if (this.Date_ID != other.Date_ID)
				return false;

			if (this.Time_ID != other.Time_ID)
				return false;

			if (this.Operator_ID != other.Operator_ID)
				return false;

			if (this.Status == null) {
				if (other.Status != null)
					return false;

			} else if (!this.Status.equals(other.Status))

				return false;

			return true;
		}

		public void copyDataTo(insert_subscription_status_measureStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Date_ID = this.Date_ID;
			other.Time_ID = this.Time_ID;
			other.Operator_ID = this.Operator_ID;
			other.Status = this.Status;
			other.Last_Modified_Time = this.Last_Modified_Time;

		}

		public void copyKeysDataTo(
				insert_subscription_status_measureStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Date_ID = this.Date_ID;
			other.Time_ID = this.Time_ID;
			other.Operator_ID = this.Operator_ID;
			other.Status = this.Status;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Date_ID = dis.readInt();

					this.Time_ID = dis.readInt();

					this.Operator_ID = dis.readLong();

					this.Status = readString(dis);

					this.Last_Modified_Time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// int

				dos.writeInt(this.Date_ID);

				// int

				dos.writeInt(this.Time_ID);

				// long

				dos.writeLong(this.Operator_ID);

				// String

				writeString(this.Status, dos);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Date_ID=" + String.valueOf(Date_ID));
			sb.append(",Time_ID=" + String.valueOf(Time_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Status=" + Status);
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_subscription_status_measureStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date_ID, other.Date_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Time_ID, other.Time_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Operator_ID,
					other.Operator_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Status, other.Status);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Subscriber_ID;

		public long getSubscriber_ID() {
			return this.Subscriber_ID;
		}

		public Long Subscriber_Pack_ID;

		public Long getSubscriber_Pack_ID() {
			return this.Subscriber_Pack_ID;
		}

		public long Channel_ID;

		public long getChannel_ID() {
			return this.Channel_ID;
		}

		public int Operator_ID;

		public int getOperator_ID() {
			return this.Operator_ID;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public Long Old_Subscription_ID;

		public Long getOld_Subscription_ID() {
			return this.Old_Subscription_ID;
		}

		public long MS_ISDN;

		public long getMS_ISDN() {
			return this.MS_ISDN;
		}

		public String SubscriptionId;

		public String getSubscriptionId() {
			return this.SubscriptionId;
		}

		public java.util.Date Creation_Time;

		public java.util.Date getCreation_Time() {
			return this.Creation_Time;
		}

		public java.util.Date Old_Start_Date;

		public java.util.Date getOld_Start_Date() {
			return this.Old_Start_Date;
		}

		public java.util.Date Activation_Date;

		public java.util.Date getActivation_Date() {
			return this.Activation_Date;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Subscriber_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.Subscriber_Pack_ID = null;
					} else {
						this.Subscriber_Pack_ID = dis.readLong();
					}

					this.Channel_ID = dis.readLong();

					this.Operator_ID = dis.readInt();

					this.Last_Modified_Time = readDate(dis);

					this.Subscription_Status = readString(dis);

					this.Start_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Old_Subscription_ID = null;
					} else {
						this.Old_Subscription_ID = dis.readLong();
					}

					this.MS_ISDN = dis.readLong();

					this.SubscriptionId = readString(dis);

					this.Creation_Time = readDate(dis);

					this.Old_Start_Date = readDate(dis);

					this.Activation_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Subscriber_ID);

				// Long

				if (this.Subscriber_Pack_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Subscriber_Pack_ID);
				}

				// long

				dos.writeLong(this.Channel_ID);

				// int

				dos.writeInt(this.Operator_ID);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// Long

				if (this.Old_Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Old_Subscription_ID);
				}

				// long

				dos.writeLong(this.MS_ISDN);

				// String

				writeString(this.SubscriptionId, dos);

				// java.util.Date

				writeDate(this.Creation_Time, dos);

				// java.util.Date

				writeDate(this.Old_Start_Date, dos);

				// java.util.Date

				writeDate(this.Activation_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Subscriber_ID=" + String.valueOf(Subscriber_ID));
			sb.append(",Subscriber_Pack_ID="
					+ String.valueOf(Subscriber_Pack_ID));
			sb.append(",Channel_ID=" + String.valueOf(Channel_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",Old_Subscription_ID="
					+ String.valueOf(Old_Subscription_ID));
			sb.append(",MS_ISDN=" + String.valueOf(MS_ISDN));
			sb.append(",SubscriptionId=" + SubscriptionId);
			sb.append(",Creation_Time=" + String.valueOf(Creation_Time));
			sb.append(",Old_Start_Date=" + String.valueOf(Old_Start_Date));
			sb.append(",Activation_Date=" + String.valueOf(Activation_Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfsubscription_new_dataStruct implements
			routines.system.IPersistableRow<copyOfsubscription_new_dataStruct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Subscription_ID;

		public long getSubscription_ID() {
			return this.Subscription_ID;
		}

		public long Subscriber_ID;

		public long getSubscriber_ID() {
			return this.Subscriber_ID;
		}

		public Long Subscriber_Pack_ID;

		public Long getSubscriber_Pack_ID() {
			return this.Subscriber_Pack_ID;
		}

		public long Channel_ID;

		public long getChannel_ID() {
			return this.Channel_ID;
		}

		public int Operator_ID;

		public int getOperator_ID() {
			return this.Operator_ID;
		}

		public java.util.Date Last_Modified_Time;

		public java.util.Date getLast_Modified_Time() {
			return this.Last_Modified_Time;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public Long Old_Subscription_ID;

		public Long getOld_Subscription_ID() {
			return this.Old_Subscription_ID;
		}

		public long MS_ISDN;

		public long getMS_ISDN() {
			return this.MS_ISDN;
		}

		public String SubscriptionId;

		public String getSubscriptionId() {
			return this.SubscriptionId;
		}

		public java.util.Date Creation_Time;

		public java.util.Date getCreation_Time() {
			return this.Creation_Time;
		}

		public java.util.Date Old_Start_Date;

		public java.util.Date getOld_Start_Date() {
			return this.Old_Start_Date;
		}

		public java.util.Date Activation_Date;

		public java.util.Date getActivation_Date() {
			return this.Activation_Date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Subscription_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfsubscription_new_dataStruct other = (copyOfsubscription_new_dataStruct) obj;

			if (this.Subscription_ID != other.Subscription_ID)
				return false;

			return true;
		}

		public void copyDataTo(copyOfsubscription_new_dataStruct other) {

			other.Subscription_ID = this.Subscription_ID;
			other.Subscriber_ID = this.Subscriber_ID;
			other.Subscriber_Pack_ID = this.Subscriber_Pack_ID;
			other.Channel_ID = this.Channel_ID;
			other.Operator_ID = this.Operator_ID;
			other.Last_Modified_Time = this.Last_Modified_Time;
			other.Subscription_Status = this.Subscription_Status;
			other.Start_Date = this.Start_Date;
			other.Old_Subscription_ID = this.Old_Subscription_ID;
			other.MS_ISDN = this.MS_ISDN;
			other.SubscriptionId = this.SubscriptionId;
			other.Creation_Time = this.Creation_Time;
			other.Old_Start_Date = this.Old_Start_Date;
			other.Activation_Date = this.Activation_Date;

		}

		public void copyKeysDataTo(copyOfsubscription_new_dataStruct other) {

			other.Subscription_ID = this.Subscription_ID;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.Subscription_ID = dis.readLong();

					this.Subscriber_ID = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.Subscriber_Pack_ID = null;
					} else {
						this.Subscriber_Pack_ID = dis.readLong();
					}

					this.Channel_ID = dis.readLong();

					this.Operator_ID = dis.readInt();

					this.Last_Modified_Time = readDate(dis);

					this.Subscription_Status = readString(dis);

					this.Start_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Old_Subscription_ID = null;
					} else {
						this.Old_Subscription_ID = dis.readLong();
					}

					this.MS_ISDN = dis.readLong();

					this.SubscriptionId = readString(dis);

					this.Creation_Time = readDate(dis);

					this.Old_Start_Date = readDate(dis);

					this.Activation_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Subscription_ID);

				// long

				dos.writeLong(this.Subscriber_ID);

				// Long

				if (this.Subscriber_Pack_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Subscriber_Pack_ID);
				}

				// long

				dos.writeLong(this.Channel_ID);

				// int

				dos.writeInt(this.Operator_ID);

				// java.util.Date

				writeDate(this.Last_Modified_Time, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// Long

				if (this.Old_Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Old_Subscription_ID);
				}

				// long

				dos.writeLong(this.MS_ISDN);

				// String

				writeString(this.SubscriptionId, dos);

				// java.util.Date

				writeDate(this.Creation_Time, dos);

				// java.util.Date

				writeDate(this.Old_Start_Date, dos);

				// java.util.Date

				writeDate(this.Activation_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Subscription_ID=" + String.valueOf(Subscription_ID));
			sb.append(",Subscriber_ID=" + String.valueOf(Subscriber_ID));
			sb.append(",Subscriber_Pack_ID="
					+ String.valueOf(Subscriber_Pack_ID));
			sb.append(",Channel_ID=" + String.valueOf(Channel_ID));
			sb.append(",Operator_ID=" + String.valueOf(Operator_ID));
			sb.append(",Last_Modified_Time="
					+ String.valueOf(Last_Modified_Time));
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",Old_Subscription_ID="
					+ String.valueOf(Old_Subscription_ID));
			sb.append(",MS_ISDN=" + String.valueOf(MS_ISDN));
			sb.append(",SubscriptionId=" + SubscriptionId);
			sb.append(",Creation_Time=" + String.valueOf(Creation_Time));
			sb.append(",Old_Start_Date=" + String.valueOf(Old_Start_Date));
			sb.append(",Activation_Date=" + String.valueOf(Activation_Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsubscription_new_dataStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Subscription_ID,
					other.Subscription_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FINAL_ETL_Subscriptions3 = new byte[0];
		static byte[] commonByteArray_FINAL_ETL_Subscriptions3 = new byte[0];

		public long ID;

		public long getID() {
			return this.ID;
		}

		public long Subscriber_ID;

		public long getSubscriber_ID() {
			return this.Subscriber_ID;
		}

		public long Subscriber_Pack_ID;

		public long getSubscriber_Pack_ID() {
			return this.Subscriber_Pack_ID;
		}

		public String Origin;

		public String getOrigin() {
			return this.Origin;
		}

		public String Subscription_Status;

		public String getSubscription_Status() {
			return this.Subscription_Status;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public long MSISDN;

		public long getMSISDN() {
			return this.MSISDN;
		}

		public String Pack_Name;

		public String getPack_Name() {
			return this.Pack_Name;
		}

		public String subscriptionId;

		public String getSubscriptionId() {
			return this.subscriptionId;
		}

		public Long Old_Subscription_ID;

		public Long getOld_Subscription_ID() {
			return this.Old_Subscription_ID;
		}

		public java.util.Date modificationDate;

		public java.util.Date getModificationDate() {
			return this.modificationDate;
		}

		public java.util.Date creationDate;

		public java.util.Date getCreationDate() {
			return this.creationDate;
		}

		public java.util.Date activationDate;

		public java.util.Date getActivationDate() {
			return this.activationDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FINAL_ETL_Subscriptions3.length) {
					if (length < 1024
							&& commonByteArray_FINAL_ETL_Subscriptions3.length == 0) {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[1024];
					} else {
						commonByteArray_FINAL_ETL_Subscriptions3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FINAL_ETL_Subscriptions3, 0,
						length);
				strReturn = new String(
						commonByteArray_FINAL_ETL_Subscriptions3, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FINAL_ETL_Subscriptions3) {

				try {

					int length = 0;

					this.ID = dis.readLong();

					this.Subscriber_ID = dis.readLong();

					this.Subscriber_Pack_ID = dis.readLong();

					this.Origin = readString(dis);

					this.Subscription_Status = readString(dis);

					this.Start_Date = readDate(dis);

					this.MSISDN = dis.readLong();

					this.Pack_Name = readString(dis);

					this.subscriptionId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Old_Subscription_ID = null;
					} else {
						this.Old_Subscription_ID = dis.readLong();
					}

					this.modificationDate = readDate(dis);

					this.creationDate = readDate(dis);

					this.activationDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.ID);

				// long

				dos.writeLong(this.Subscriber_ID);

				// long

				dos.writeLong(this.Subscriber_Pack_ID);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.Subscription_Status, dos);

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// long

				dos.writeLong(this.MSISDN);

				// String

				writeString(this.Pack_Name, dos);

				// String

				writeString(this.subscriptionId, dos);

				// Long

				if (this.Old_Subscription_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Old_Subscription_ID);
				}

				// java.util.Date

				writeDate(this.modificationDate, dos);

				// java.util.Date

				writeDate(this.creationDate, dos);

				// java.util.Date

				writeDate(this.activationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Subscriber_ID=" + String.valueOf(Subscriber_ID));
			sb.append(",Subscriber_Pack_ID="
					+ String.valueOf(Subscriber_Pack_ID));
			sb.append(",Origin=" + Origin);
			sb.append(",Subscription_Status=" + Subscription_Status);
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",MSISDN=" + String.valueOf(MSISDN));
			sb.append(",Pack_Name=" + Pack_Name);
			sb.append(",subscriptionId=" + subscriptionId);
			sb.append(",Old_Subscription_ID="
					+ String.valueOf(Old_Subscription_ID));
			sb.append(",modificationDate=" + String.valueOf(modificationDate));
			sb.append(",creationDate=" + String.valueOf(creationDate));
			sb.append(",activationDate=" + String.valueOf(activationDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				copyOfsubscription_new_dataStruct copyOfsubscription_new_data = new copyOfsubscription_new_dataStruct();
				row3Struct row3 = new row3Struct();
				insert_subscription_status_measureStruct insert_subscription_status_measure = new insert_subscription_status_measureStruct();

				/**
				 * [tMysqlOutput_4 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_4", false);
				start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_4";

				int tos_count_tMysqlOutput_4 = 0;

				int updateKeyCount_tMysqlOutput_4 = 5;
				if (updateKeyCount_tMysqlOutput_4 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_4 = 0;
				int nb_line_update_tMysqlOutput_4 = 0;
				int nb_line_inserted_tMysqlOutput_4 = 0;
				int nb_line_deleted_tMysqlOutput_4 = 0;
				int nb_line_rejected_tMysqlOutput_4 = 0;

				int deletedCount_tMysqlOutput_4 = 0;
				int updatedCount_tMysqlOutput_4 = 0;
				int insertedCount_tMysqlOutput_4 = 0;

				int rejectedCount_tMysqlOutput_4 = 0;

				String tableName_tMysqlOutput_4 = "subscription_status_measure";
				boolean whetherReject_tMysqlOutput_4 = false;

				java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime()
						.getTime();
				calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4
						.getTime().getTime();
				long date_tMysqlOutput_4;

				java.sql.Connection conn_tMysqlOutput_4 = null;
				String dbProperties_tMysqlOutput_4 = context.report_AdditionalParams;
				String url_tMysqlOutput_4 = null;
				if (dbProperties_tMysqlOutput_4 == null
						|| dbProperties_tMysqlOutput_4.trim().length() == 0) {
					url_tMysqlOutput_4 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_4 = context.report_AdditionalParams;
					if (!properties_tMysqlOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_4 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ properties_tMysqlOutput_4;
				}
				String driverClass_tMysqlOutput_4 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_4 = context.report_login;

				final String decryptedPassword_tMysqlOutput_4 = context.report_password;

				String dbPwd_tMysqlOutput_4 = decryptedPassword_tMysqlOutput_4;
				java.lang.Class.forName(driverClass_tMysqlOutput_4);

				conn_tMysqlOutput_4 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_4, dbUser_tMysqlOutput_4,
						dbPwd_tMysqlOutput_4);

				resourceMap.put("conn_tMysqlOutput_4", conn_tMysqlOutput_4);
				conn_tMysqlOutput_4.setAutoCommit(false);
				int commitEvery_tMysqlOutput_4 = 10000;
				int commitCounter_tMysqlOutput_4 = 0;

				int count_tMysqlOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_4 = conn_tMysqlOutput_4
						.prepareStatement("SELECT COUNT(1) FROM `"
								+ "subscription_status_measure"
								+ "` WHERE `Subscription_ID` = ? AND `Date_ID` = ? AND `Time_ID` = ? AND `Operator_ID` = ? AND `Status` = ?");
				String insert_tMysqlOutput_4 = "INSERT INTO `"
						+ "subscription_status_measure"
						+ "` (`Subscription_ID`,`Date_ID`,`Time_ID`,`Operator_ID`,`Status`,`Last_Modified_Time`) VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_4 = conn_tMysqlOutput_4
						.prepareStatement(insert_tMysqlOutput_4);
				String update_tMysqlOutput_4 = "UPDATE `"
						+ "subscription_status_measure"
						+ "` SET `Last_Modified_Time` = ? WHERE `Subscription_ID` = ? AND `Date_ID` = ? AND `Time_ID` = ? AND `Operator_ID` = ? AND `Status` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_4 = conn_tMysqlOutput_4
						.prepareStatement(update_tMysqlOutput_4);

				/**
				 * [tMysqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
					Long weekNumber;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_subscription_status_measureStruct insert_subscription_status_measure_tmp = new insert_subscription_status_measureStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "subscriptions";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = context.report_AdditionalParams;
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = context.report_AdditionalParams;
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://"
							+ context.report_server + ":" + context.report_port
							+ "/" + context.report_database + "?"
							+ properties_tMysqlOutput_2;
				}
				String driverClass_tMysqlOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_2 = context.report_login;

				final String decryptedPassword_tMysqlOutput_2 = context.report_password;

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
				java.lang.Class.forName(driverClass_tMysqlOutput_2);

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "subscriptions"
						+ "` (`Subscription_ID`,`Subscriber_ID`,`Subscriber_Pack_ID`,`Channel_ID`,`Operator_ID`,`Last_Modified_Time`,`Subscription_Status`,`Start_Date`,`Old_Subscription_ID`,`MS_ISDN`,`SubscriptionId`,`Creation_Time`,`Old_Start_Date`,`Activation_Date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfsubscription_new_dataStruct copyOfsubscription_new_data_tmp = new copyOfsubscription_new_dataStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_2);
				String dbUser_tMysqlInput_2 = context.motech_login;

				final String decryptedPassword_tMysqlInput_2 = context.motech_password;

				String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;

				String url_tMysqlInput_2 = "jdbc:mysql://"
						+ context.motech_server + ":" + context.motech_port
						+ "/" + context.motech_database + "?"
						+ context.motech_additionalParams;

				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT subs.id as 'ID', subs.subscriber_id_OID as 'Subscriber_ID', \nsubs.subscriptionPack_id_OID as 'Subscriber_Pack_ID', \nsubs.origin as 'Origin',\nCASE WHEN subs.status='DEACTIVATED' AND subs.deactivationReason='DEACTIVATED_BY_USER' THEN 'DEACTIVATED_BY_USER'\nELSE subs.status END AS 'Subscription_Status',\nsubs.startDate as 'Start_Date',\nsbr.callingNumber as 'MSISDN', sp.name as 'Pack_Name', subs.subscriptionId,\nold_subs.Old_Subscription_ID,\nsubs.modificationDate,\nsubs.creationDate,\nsubs.activationDate   \nFROM nms_subscriptions subs\nINNER JOIN nms_subscription_packs sp\nON sp.id = subs.subscriptionPack_id_OID\nINNER JOIN nms_subscribers sbr\nON sbr.id = subs.subscriber_id_OID\nLEFT OUTER JOIN (\nSELECT MAX(subs2.id) as 'Old_Subscription_ID',subs2.subscriber_id_OID as'User_id' \nFROM nms_subscriptions subs2 \nWhere subs2.status = 'DEACTIVATED'\nGROUP BY subs2.subscriber_id_OID   \n) old_subs ON (old_subs.User_id = subs.subscriber_id_OID and subs.status ='ACTIVE')\nWHERE subs.creationDate>'"
						+ (String) globalMap.get("lastEtlTime") + "'";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);

				java.sql.ResultSet rs_tMysqlInput_2 = null;
				try {
					rs_tMysqlInput_2 = stmt_tMysqlInput_2
							.executeQuery(dbquery_tMysqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
							.getMetaData();
					int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
							.getColumnCount();

					String tmpContent_tMysqlInput_2 = null;

					while (rs_tMysqlInput_2.next()) {
						nb_line_tMysqlInput_2++;

						if (colQtyInRs_tMysqlInput_2 < 1) {
							row2.ID = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(1) != null) {
								row2.ID = rs_tMysqlInput_2.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 2) {
							row2.Subscriber_ID = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(2) != null) {
								row2.Subscriber_ID = rs_tMysqlInput_2
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 3) {
							row2.Subscriber_Pack_ID = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(3) != null) {
								row2.Subscriber_Pack_ID = rs_tMysqlInput_2
										.getLong(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 4) {
							row2.Origin = null;
						} else {

							row2.Origin = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_2, 4, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 5) {
							row2.Subscription_Status = null;
						} else {

							row2.Subscription_Status = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_2, 5, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 6) {
							row2.Start_Date = null;
						} else {

							if (rs_tMysqlInput_2.getString(6) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(6);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									row2.Start_Date = rs_tMysqlInput_2
											.getTimestamp(6);
								} else {
									row2.Start_Date = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								row2.Start_Date = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 7) {
							row2.MSISDN = 0;
						} else {

							if (rs_tMysqlInput_2.getObject(7) != null) {
								row2.MSISDN = rs_tMysqlInput_2.getLong(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 8) {
							row2.Pack_Name = null;
						} else {

							row2.Pack_Name = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_2, 8, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 9) {
							row2.subscriptionId = null;
						} else {

							row2.subscriptionId = routines.system.JDBCUtil
									.getString(rs_tMysqlInput_2, 9, false);
						}
						if (colQtyInRs_tMysqlInput_2 < 10) {
							row2.Old_Subscription_ID = null;
						} else {

							if (rs_tMysqlInput_2.getObject(10) != null) {
								row2.Old_Subscription_ID = rs_tMysqlInput_2
										.getLong(10);
							} else {
								row2.Old_Subscription_ID = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 11) {
							row2.modificationDate = null;
						} else {

							if (rs_tMysqlInput_2.getString(11) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(11);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									row2.modificationDate = rs_tMysqlInput_2
											.getTimestamp(11);
								} else {
									row2.modificationDate = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								row2.modificationDate = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 12) {
							row2.creationDate = null;
						} else {

							if (rs_tMysqlInput_2.getString(12) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(12);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									row2.creationDate = rs_tMysqlInput_2
											.getTimestamp(12);
								} else {
									row2.creationDate = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								row2.creationDate = null;
							}
						}
						if (colQtyInRs_tMysqlInput_2 < 13) {
							row2.activationDate = null;
						} else {

							if (rs_tMysqlInput_2.getString(13) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(13);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									row2.activationDate = rs_tMysqlInput_2
											.getTimestamp(13);
								} else {
									row2.activationDate = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								row2.activationDate = null;
							}
						}

						/**
						 * [tMysqlInput_2 begin ] stop
						 */

						/**
						 * [tMysqlInput_2 main ] start
						 */

						currentComponent = "tMysqlInput_2";

						tos_count_tMysqlInput_2++;

						/**
						 * [tMysqlInput_2 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							copyOfsubscription_new_data = null;

							// # Output table : 'copyOfsubscription_new_data'
							copyOfsubscription_new_data_tmp.Subscription_ID = row2.ID;
							copyOfsubscription_new_data_tmp.Subscriber_ID = row2.Subscriber_ID;
							copyOfsubscription_new_data_tmp.Subscriber_Pack_ID = row2.Subscriber_Pack_ID;
							copyOfsubscription_new_data_tmp.Channel_ID = ReportingHelper
									.getChannelId(row2.Origin,
											(java.sql.Connection) resourceMap
													.get("conn_tMysqlOutput_2"));
							copyOfsubscription_new_data_tmp.Operator_ID = 0;
							copyOfsubscription_new_data_tmp.Last_Modified_Time = row2.modificationDate;
							copyOfsubscription_new_data_tmp.Subscription_Status = row2.Subscription_Status;
							copyOfsubscription_new_data_tmp.Start_Date = row2.Start_Date;
							copyOfsubscription_new_data_tmp.Old_Subscription_ID = row2.Old_Subscription_ID;
							copyOfsubscription_new_data_tmp.MS_ISDN = row2.MSISDN;
							copyOfsubscription_new_data_tmp.SubscriptionId = row2.subscriptionId;
							copyOfsubscription_new_data_tmp.Creation_Time = row2.creationDate;
							copyOfsubscription_new_data_tmp.Old_Start_Date = row2.Start_Date;
							copyOfsubscription_new_data_tmp.Activation_Date = row2.activationDate;
							copyOfsubscription_new_data = copyOfsubscription_new_data_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "copyOfsubscription_new_data"
						if (copyOfsubscription_new_data != null) {

							/**
							 * [tMysqlOutput_2 main ] start
							 */

							currentComponent = "tMysqlOutput_2";

							row3 = null;
							whetherReject_tMysqlOutput_2 = false;
							pstmt_tMysqlOutput_2
									.setLong(
											1,
											copyOfsubscription_new_data.Subscription_ID);

							pstmt_tMysqlOutput_2.setLong(2,
									copyOfsubscription_new_data.Subscriber_ID);

							if (copyOfsubscription_new_data.Subscriber_Pack_ID == null) {
								pstmt_tMysqlOutput_2.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2
										.setLong(
												3,
												copyOfsubscription_new_data.Subscriber_Pack_ID);
							}

							pstmt_tMysqlOutput_2.setLong(4,
									copyOfsubscription_new_data.Channel_ID);

							pstmt_tMysqlOutput_2.setInt(5,
									copyOfsubscription_new_data.Operator_ID);

							if (copyOfsubscription_new_data.Last_Modified_Time != null) {
								date_tMysqlOutput_2 = copyOfsubscription_new_data.Last_Modified_Time
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(6,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(6,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(6,
										java.sql.Types.DATE);
							}

							if (copyOfsubscription_new_data.Subscription_Status == null) {
								pstmt_tMysqlOutput_2.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2
										.setString(
												7,
												copyOfsubscription_new_data.Subscription_Status);
							}

							if (copyOfsubscription_new_data.Start_Date != null) {
								date_tMysqlOutput_2 = copyOfsubscription_new_data.Start_Date
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(8,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(8,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(8,
										java.sql.Types.DATE);
							}

							if (copyOfsubscription_new_data.Old_Subscription_ID == null) {
								pstmt_tMysqlOutput_2.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2
										.setLong(
												9,
												copyOfsubscription_new_data.Old_Subscription_ID);
							}

							pstmt_tMysqlOutput_2.setLong(10,
									copyOfsubscription_new_data.MS_ISDN);

							if (copyOfsubscription_new_data.SubscriptionId == null) {
								pstmt_tMysqlOutput_2.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2
										.setString(
												11,
												copyOfsubscription_new_data.SubscriptionId);
							}

							if (copyOfsubscription_new_data.Creation_Time != null) {
								date_tMysqlOutput_2 = copyOfsubscription_new_data.Creation_Time
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(12,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(12,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(12,
										java.sql.Types.DATE);
							}

							if (copyOfsubscription_new_data.Old_Start_Date != null) {
								date_tMysqlOutput_2 = copyOfsubscription_new_data.Old_Start_Date
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(13,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(13,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(13,
										java.sql.Types.DATE);
							}

							if (copyOfsubscription_new_data.Activation_Date != null) {
								date_tMysqlOutput_2 = copyOfsubscription_new_data.Activation_Date
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(14,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(14,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(14,
										java.sql.Types.DATE);
							}

							try {
								nb_line_tMysqlOutput_2++;
								insertedCount_tMysqlOutput_2 = insertedCount_tMysqlOutput_2
										+ pstmt_tMysqlOutput_2.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_2 = true;
								System.err.print(e.getMessage());
							}
							if (!whetherReject_tMysqlOutput_2) {
								row3 = new row3Struct();
								row3.Subscription_ID = copyOfsubscription_new_data.Subscription_ID;
								row3.Subscriber_ID = copyOfsubscription_new_data.Subscriber_ID;
								row3.Subscriber_Pack_ID = copyOfsubscription_new_data.Subscriber_Pack_ID;
								row3.Channel_ID = copyOfsubscription_new_data.Channel_ID;
								row3.Operator_ID = copyOfsubscription_new_data.Operator_ID;
								row3.Last_Modified_Time = copyOfsubscription_new_data.Last_Modified_Time;
								row3.Subscription_Status = copyOfsubscription_new_data.Subscription_Status;
								row3.Start_Date = copyOfsubscription_new_data.Start_Date;
								row3.Old_Subscription_ID = copyOfsubscription_new_data.Old_Subscription_ID;
								row3.MS_ISDN = copyOfsubscription_new_data.MS_ISDN;
								row3.SubscriptionId = copyOfsubscription_new_data.SubscriptionId;
								row3.Creation_Time = copyOfsubscription_new_data.Creation_Time;
								row3.Old_Start_Date = copyOfsubscription_new_data.Old_Start_Date;
								row3.Activation_Date = copyOfsubscription_new_data.Activation_Date;
							}
							commitCounter_tMysqlOutput_2++;

							if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

								conn_tMysqlOutput_2.commit();
								commitCounter_tMysqlOutput_2 = 0;

							}

							tos_count_tMysqlOutput_2++;

							/**
							 * [tMysqlOutput_2 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_4 main ] start
								 */

								currentComponent = "tMap_4";

								boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_4 = false;
								boolean mainRowRejected_tMap_4 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_4__Struct Var = Var__tMap_4;
									Var.weekNumber = ReportingHelper
											.addStatusMeasureAndTransitionViewRecordsForNewSubscription(
													row3.Subscription_ID,
													row3.Channel_ID,
													row3.Operator_ID,
													row3.Subscriber_Pack_ID,
													row3.Subscription_Status,
													row3.Last_Modified_Time,
													row3.Creation_Time,
													row3.Activation_Date,
													row3.Start_Date,
													(java.sql.Connection) resourceMap
															.get("conn_tMysqlOutput_2"));// ###############################
									// ###############################
									// # Output tables

									insert_subscription_status_measure = null;

									// # Output table :
									// 'insert_subscription_status_measure'
									insert_subscription_status_measure_tmp.Subscription_ID = 0;
									insert_subscription_status_measure_tmp.Date_ID = 0;
									insert_subscription_status_measure_tmp.Time_ID = 0;
									insert_subscription_status_measure_tmp.Operator_ID = 0;
									insert_subscription_status_measure_tmp.Status = "Helper Record";
									insert_subscription_status_measure_tmp.Last_Modified_Time = null;
									insert_subscription_status_measure = insert_subscription_status_measure_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_4 = false;

								tos_count_tMap_4++;

								/**
								 * [tMap_4 main ] stop
								 */
								// Start of branch
								// "insert_subscription_status_measure"
								if (insert_subscription_status_measure != null) {

									/**
									 * [tMysqlOutput_4 main ] start
									 */

									currentComponent = "tMysqlOutput_4";

									whetherReject_tMysqlOutput_4 = false;
									pstmt_tMysqlOutput_4
											.setLong(
													1,
													insert_subscription_status_measure.Subscription_ID);

									pstmt_tMysqlOutput_4
											.setInt(2,
													insert_subscription_status_measure.Date_ID);

									pstmt_tMysqlOutput_4
											.setInt(3,
													insert_subscription_status_measure.Time_ID);

									pstmt_tMysqlOutput_4
											.setLong(
													4,
													insert_subscription_status_measure.Operator_ID);

									if (insert_subscription_status_measure.Status == null) {
										pstmt_tMysqlOutput_4.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMysqlOutput_4
												.setString(
														5,
														insert_subscription_status_measure.Status);
									}

									java.sql.ResultSet rs_tMysqlOutput_4 = pstmt_tMysqlOutput_4
											.executeQuery();
									int checkCount_tMysqlOutput_4 = -1;
									while (rs_tMysqlOutput_4.next()) {
										checkCount_tMysqlOutput_4 = rs_tMysqlOutput_4
												.getInt(1);
									}
									if (checkCount_tMysqlOutput_4 > 0) {
										if (insert_subscription_status_measure.Last_Modified_Time != null) {
											date_tMysqlOutput_4 = insert_subscription_status_measure.Last_Modified_Time
													.getTime();
											if (date_tMysqlOutput_4 < year1_tMysqlOutput_4
													|| date_tMysqlOutput_4 >= year10000_tMysqlOutput_4) {
												pstmtUpdate_tMysqlOutput_4
														.setString(1,
																"0000-00-00 00:00:00");
											} else {
												pstmtUpdate_tMysqlOutput_4
														.setTimestamp(
																1,
																new java.sql.Timestamp(
																		date_tMysqlOutput_4));
											}
										} else {
											pstmtUpdate_tMysqlOutput_4.setNull(
													1, java.sql.Types.DATE);
										}

										pstmtUpdate_tMysqlOutput_4
												.setLong(
														2 + count_tMysqlOutput_4,
														insert_subscription_status_measure.Subscription_ID);

										pstmtUpdate_tMysqlOutput_4
												.setInt(3 + count_tMysqlOutput_4,
														insert_subscription_status_measure.Date_ID);

										pstmtUpdate_tMysqlOutput_4
												.setInt(4 + count_tMysqlOutput_4,
														insert_subscription_status_measure.Time_ID);

										pstmtUpdate_tMysqlOutput_4
												.setLong(
														5 + count_tMysqlOutput_4,
														insert_subscription_status_measure.Operator_ID);

										if (insert_subscription_status_measure.Status == null) {
											pstmtUpdate_tMysqlOutput_4.setNull(
													6 + count_tMysqlOutput_4,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_4
													.setString(
															6 + count_tMysqlOutput_4,
															insert_subscription_status_measure.Status);
										}

										try {
											updatedCount_tMysqlOutput_4 = updatedCount_tMysqlOutput_4
													+ pstmtUpdate_tMysqlOutput_4
															.executeUpdate();
											nb_line_tMysqlOutput_4++;
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_4 = true;
											nb_line_tMysqlOutput_4++;
											System.err.print(e.getMessage());
										}
									} else {
										pstmtInsert_tMysqlOutput_4
												.setLong(
														1,
														insert_subscription_status_measure.Subscription_ID);

										pstmtInsert_tMysqlOutput_4
												.setInt(2,
														insert_subscription_status_measure.Date_ID);

										pstmtInsert_tMysqlOutput_4
												.setInt(3,
														insert_subscription_status_measure.Time_ID);

										pstmtInsert_tMysqlOutput_4
												.setLong(
														4,
														insert_subscription_status_measure.Operator_ID);

										if (insert_subscription_status_measure.Status == null) {
											pstmtInsert_tMysqlOutput_4.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_4
													.setString(
															5,
															insert_subscription_status_measure.Status);
										}

										if (insert_subscription_status_measure.Last_Modified_Time != null) {
											date_tMysqlOutput_4 = insert_subscription_status_measure.Last_Modified_Time
													.getTime();
											if (date_tMysqlOutput_4 < year1_tMysqlOutput_4
													|| date_tMysqlOutput_4 >= year10000_tMysqlOutput_4) {
												pstmtInsert_tMysqlOutput_4
														.setString(6,
																"0000-00-00 00:00:00");
											} else {
												pstmtInsert_tMysqlOutput_4
														.setTimestamp(
																6,
																new java.sql.Timestamp(
																		date_tMysqlOutput_4));
											}
										} else {
											pstmtInsert_tMysqlOutput_4.setNull(
													6, java.sql.Types.DATE);
										}

										try {
											insertedCount_tMysqlOutput_4 = insertedCount_tMysqlOutput_4
													+ pstmtInsert_tMysqlOutput_4
															.executeUpdate();
											nb_line_tMysqlOutput_4++;
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_4 = true;
											nb_line_tMysqlOutput_4++;
											System.err.print(e.getMessage());
										}
									}
									if (!whetherReject_tMysqlOutput_4) {
									}
									commitCounter_tMysqlOutput_4++;

									if (commitEvery_tMysqlOutput_4 <= commitCounter_tMysqlOutput_4) {

										conn_tMysqlOutput_4.commit();
										commitCounter_tMysqlOutput_4 = 0;

									}

									tos_count_tMysqlOutput_4++;

									/**
									 * [tMysqlOutput_4 main ] stop
									 */

								} // End of branch
									// "insert_subscription_status_measure"

							} // End of branch "row3"

						} // End of branch "copyOfsubscription_new_data"

						/**
						 * [tMysqlInput_2 end ] start
						 */

						currentComponent = "tMysqlInput_2";

					}
				} finally {
					if (rs_tMysqlInput_2 != null) {
						rs_tMysqlInput_2.close();
					}
					stmt_tMysqlInput_2.close();
					if (conn_tMysqlInput_2 != null
							&& !conn_tMysqlInput_2.isClosed()) {

						conn_tMysqlInput_2.close();

					}

				}

				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				if (commitCounter_tMysqlOutput_2 > 0) {

					conn_tMysqlOutput_2.commit();

				}

				conn_tMysqlOutput_2.close();

				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMysqlOutput_4 end ] start
				 */

				currentComponent = "tMysqlOutput_4";

				if (pstmtUpdate_tMysqlOutput_4 != null) {

					pstmtUpdate_tMysqlOutput_4.close();

				}
				if (pstmtInsert_tMysqlOutput_4 != null) {

					pstmtInsert_tMysqlOutput_4.close();

				}
				if (pstmt_tMysqlOutput_4 != null) {

					pstmt_tMysqlOutput_4.close();

				}

				if (commitCounter_tMysqlOutput_4 > 0) {

					conn_tMysqlOutput_4.commit();

				}

				conn_tMysqlOutput_4.close();

				resourceMap.put("finish_tMysqlOutput_4", true);

				nb_line_deleted_tMysqlOutput_4 = nb_line_deleted_tMysqlOutput_4
						+ deletedCount_tMysqlOutput_4;
				nb_line_update_tMysqlOutput_4 = nb_line_update_tMysqlOutput_4
						+ updatedCount_tMysqlOutput_4;
				nb_line_inserted_tMysqlOutput_4 = nb_line_inserted_tMysqlOutput_4
						+ insertedCount_tMysqlOutput_4;
				nb_line_rejected_tMysqlOutput_4 = nb_line_rejected_tMysqlOutput_4
						+ rejectedCount_tMysqlOutput_4;

				globalMap.put("tMysqlOutput_4_NB_LINE", nb_line_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_4);

				ok_Hash.put("tMysqlOutput_4", true);
				end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				tMysqlRow_1Process(globalMap);

				/**
				 * [tMysqlOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_2 finally ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (resourceMap.get("finish_tMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
							String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :"
									+ sqlEx_tMysqlOutput_2.getMessage();

							System.err.println(errorMessage_tMysqlOutput_2);
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMysqlOutput_4 finally ] start
				 */

				currentComponent = "tMysqlOutput_4";

				if (resourceMap.get("finish_tMysqlOutput_4") == null) {
					if (resourceMap.get("conn_tMysqlOutput_4") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_4")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_4) {
							String errorMessage_tMysqlOutput_4 = "failed to close the connection in tMysqlOutput_4 :"
									+ sqlEx_tMysqlOutput_4.getMessage();

							System.err.println(errorMessage_tMysqlOutput_4);
						}
					}
				}

				/**
				 * [tMysqlOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_1 begin ] start
				 */

				ok_Hash.put("tMysqlRow_1", false);
				start_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				currentComponent = "tMysqlRow_1";

				int tos_count_tMysqlRow_1 = 0;

				java.sql.Connection conn_tMysqlRow_1 = null;
				String query_tMysqlRow_1 = "";
				boolean whetherReject_tMysqlRow_1 = false;
				String driverClass_tMysqlRow_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlRow_1);

				String url_tMysqlRow_1 = "jdbc:mysql://"
						+ context.report_server + ":" + context.report_port
						+ "/" + context.report_database + "?"
						+ context.report_AdditionalParams;
				String dbUser_tMysqlRow_1 = context.report_login;

				final String decryptedPassword_tMysqlRow_1 = context.report_password;

				String dbPwd_tMysqlRow_1 = decryptedPassword_tMysqlRow_1;

				conn_tMysqlRow_1 = java.sql.DriverManager.getConnection(
						url_tMysqlRow_1, dbUser_tMysqlRow_1, dbPwd_tMysqlRow_1);

				if (conn_tMysqlRow_1.getAutoCommit()) {

					conn_tMysqlRow_1.setAutoCommit(false);

				}
				int commitEvery_tMysqlRow_1 = 10000;
				int commitCounter_tMysqlRow_1 = 0;

				java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1
						.createStatement();

				/**
				 * [tMysqlRow_1 begin ] stop
				 */

				/**
				 * [tMysqlRow_1 main ] start
				 */

				currentComponent = "tMysqlRow_1";

				query_tMysqlRow_1 = "UPDATE ETL_info_table SET ETL_info_table.last_etl_time = (SELECT MAX(Last_Modified_Time) from subscriptions),\nETL_info_table.record_count=(SELECT COUNT(*) from subscriptions)\nWHERE ETL_info_table.table_id = 14";
				whetherReject_tMysqlRow_1 = false;
				globalMap.put("tMysqlRow_1_QUERY", query_tMysqlRow_1);
				try {
					stmt_tMysqlRow_1.execute(query_tMysqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_1 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tMysqlRow_1++;
				if (commitEvery_tMysqlRow_1 <= commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;
				}

				tos_count_tMysqlRow_1++;

				/**
				 * [tMysqlRow_1 main ] stop
				 */

				/**
				 * [tMysqlRow_1 end ] start
				 */

				currentComponent = "tMysqlRow_1";

				stmt_tMysqlRow_1.close();
				if (commitEvery_tMysqlRow_1 > commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;

				}
				conn_tMysqlRow_1.close();

				ok_Hash.put("tMysqlRow_1", true);
				end_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				/**
				 * [tMysqlRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_1 finally ] start
				 */

				currentComponent = "tMysqlRow_1";

				/**
				 * [tMysqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Subscriptions3 Subscriptions3Class = new Subscriptions3();

		int exitCode = Subscriptions3Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Subscriptions3.class
					.getClassLoader().getResourceAsStream(
							"final_etl/subscriptions3_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.motech_login = (String) context.getProperty("motech_login");
			context.motech_database = (String) context
					.getProperty("motech_database");
			context.motech_port = (String) context.getProperty("motech_port");
			String pwd_motech_password_value = context
					.getProperty("motech_password");
			context.motech_password = null;
			if (pwd_motech_password_value != null) {
				if (context_param.containsKey("motech_password")) {// no need to
																	// decrypt
																	// if it
																	// come from
																	// program
																	// argument
																	// or parent
																	// job
																	// runtime
					context.motech_password = pwd_motech_password_value;
				} else if (!pwd_motech_password_value.isEmpty()) {
					try {
						context.motech_password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_motech_password_value);
						context.put("motech_password", context.motech_password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.motech_additionalParams = (String) context
					.getProperty("motech_additionalParams");
			context.motech_server = (String) context
					.getProperty("motech_server");
			context.report_port = (String) context.getProperty("report_port");
			context.report_server = (String) context
					.getProperty("report_server");
			context.report_database = (String) context
					.getProperty("report_database");
			context.report_login = (String) context.getProperty("report_login");
			String pwd_report_password_value = context
					.getProperty("report_password");
			context.report_password = null;
			if (pwd_report_password_value != null) {
				if (context_param.containsKey("report_password")) {// no need to
																	// decrypt
																	// if it
																	// come from
																	// program
																	// argument
																	// or parent
																	// job
																	// runtime
					context.report_password = pwd_report_password_value;
				} else if (!pwd_report_password_value.isEmpty()) {
					try {
						context.report_password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_report_password_value);
						context.put("report_password", context.report_password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.report_AdditionalParams = (String) context
					.getProperty("report_AdditionalParams");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("motech_login")) {
				context.motech_login = (String) parentContextMap
						.get("motech_login");
			}
			if (parentContextMap.containsKey("motech_database")) {
				context.motech_database = (String) parentContextMap
						.get("motech_database");
			}
			if (parentContextMap.containsKey("motech_port")) {
				context.motech_port = (String) parentContextMap
						.get("motech_port");
			}
			if (parentContextMap.containsKey("motech_password")) {
				context.motech_password = (java.lang.String) parentContextMap
						.get("motech_password");
			}
			if (parentContextMap.containsKey("motech_additionalParams")) {
				context.motech_additionalParams = (String) parentContextMap
						.get("motech_additionalParams");
			}
			if (parentContextMap.containsKey("motech_server")) {
				context.motech_server = (String) parentContextMap
						.get("motech_server");
			}
			if (parentContextMap.containsKey("report_port")) {
				context.report_port = (String) parentContextMap
						.get("report_port");
			}
			if (parentContextMap.containsKey("report_server")) {
				context.report_server = (String) parentContextMap
						.get("report_server");
			}
			if (parentContextMap.containsKey("report_database")) {
				context.report_database = (String) parentContextMap
						.get("report_database");
			}
			if (parentContextMap.containsKey("report_login")) {
				context.report_login = (String) parentContextMap
						.get("report_login");
			}
			if (parentContextMap.containsKey("report_password")) {
				context.report_password = (java.lang.String) parentContextMap
						.get("report_password");
			}
			if (parentContextMap.containsKey("report_AdditionalParams")) {
				context.report_AdditionalParams = (String) parentContextMap
						.get("report_AdditionalParams");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("motech_password");
		parametersToEncrypt.add("report_password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Subscriptions3");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 213132 characters generated by Talend Open Studio for Big Data on the May 17,
 * 2016 4:00:48 PM PDT
 ************************************************************************************************/
